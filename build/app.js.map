{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app.coffee","src/modules/findModule.coffee","src/modules/firebaseframer.coffee","src/modules/inputfield.coffee","src/modules/sketchSlicer.coffee"],"names":[],"mappingslGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtxfile":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var FirebaseFramer, Input, bg, demoDB, lineHeight, post, s, slices, textfield;\n\ns = require('sketchSlicer');\n\nFirebaseFramer = require('firebaseframer').FirebaseFramer;\n\nInput = require(\"inputfield\").Input;\n\nslices = s.sketchSlicer();\n\nlineHeight = 30;\n\nFramer.Defaults.Animation = {\n  curve: 'spring(150, 10, 0)'\n};\n\ndemoDB = new FirebaseFramer({\n  projectID: \"framer-sketch-firebase-test\",\n  secret: \"lHwsK4ljhwUmMt3EU1ybrMPQcSDgbKhvTIwuqJ9I\",\n  server: \"s-usc1c-nss-134.firebaseio.com\"\n});\n\nbg = new BackgroundLayer({\n  backgroundColor: \"#fafafa\"\n});\n\nslices[\"button\"].onMouseDown(function() {\n  return slices[\"button\"].image = \"images/button-down.png\";\n});\n\ntextfield = new Input({\n  parent: slices[\"field\"],\n  setup: false,\n  type: \"text\",\n  width: slices[\"field\"].width,\n  height: slices[\"field\"].height\n});\n\ntextfield.style = {\n  fontSize: \"14px\",\n  color: \"#333\",\n  fontFamily: \"Helvetica\",\n  padding: \"0px 0px 0px 20px\"\n};\n\npost = function() {\n  if (textfield.value.length) {\n    return demoDB.post('/messages', {\n      \"text\": textfield.value\n    });\n  }\n};\n\ndemoDB.onChange(\"/messages\", function(message) {\n  var child, h, i, j, k, len, line, m, messageArray, ref, ref1, results, t;\n  ref = slices[\"chat_window\"].children;\n  for (j = 0, len = ref.length; j < len; j++) {\n    child = ref[j];\n    child.animate({\n      y: child.y - lineHeight\n    });\n  }\n  messageArray = _.toArray(message);\n  i = 1;\n  h = lineHeight;\n  results = [];\n  for (k = messageArray.length - 1; k >= 0; k += -1) {\n    m = messageArray[k];\n    t = (ref1 = m.text) != null ? ref1 : m;\n    line = new TextLayer({\n      x: 0,\n      textAlign: \"left\",\n      y: slices[\"chat_window\"].height - h * i,\n      text: t,\n      color: \"#333\",\n      font: \"14px/1.5 Helvetica\"\n    });\n    line.parent = slices.chat_window;\n    results.push(i++);\n  }\n  return results;\n});\n\nslices[\"button\"].onMouseUp(function() {\n  slices[\"button\"].image = \"images/button.png\";\n  post();\n  return textfield.value = \"\";\n});\n\ndocument.addEventListener('keypress', function(event) {\n  if (event.keyCode === 13) {\n    event.preventDefault();\n    post();\n    return textfield.value = \"\";\n  }\n});\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2plZmZyZXkuaGFycmlzL0RldmVsb3BtZW50L2ZyYW1lci1za2V0Y2gtZmlyZWJhc2UtYm9pbGVycGxhdGUvc3JjL2FwcC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvamVmZnJleS5oYXJyaXMvRGV2ZWxvcG1lbnQvZnJhbWVyLXNrZXRjaC1maXJlYmFzZS1ib2lsZXJwbGF0ZS9zcmMvYXBwLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxJQUFBOztBQUFBLENBQUEsR0FBSSxPQUFBLENBQVEsY0FBUjs7QUFDSCxpQkFBa0IsT0FBQSxDQUFRLGdCQUFSOztBQUNsQixRQUFTLE9BQUEsQ0FBUSxZQUFSOztBQUVWLE1BQUEsR0FBUyxDQUFDLENBQUMsWUFBRixDQUFBOztBQUVULFVBQUEsR0FBYTs7QUFFYixNQUFNLENBQUMsUUFBUSxDQUFDLFNBQWhCLEdBQ0U7RUFBQSxLQUFBLEVBQU8sb0JBQVA7OztBQUVGLE1BQUEsR0FBUyxJQUFJLGNBQUosQ0FDUjtFQUFBLFNBQUEsRUFBVyw2QkFBWDtFQUNBLE1BQUEsRUFBUSwwQ0FEUjtFQUVBLE1BQUEsRUFBUSxnQ0FGUjtDQURROztBQUtULEVBQUEsR0FBSyxJQUFJLGVBQUosQ0FDRDtFQUFBLGVBQUEsRUFBaUIsU0FBakI7Q0FEQzs7QUFLTCxNQUFPLENBQUEsUUFBQSxDQUFTLENBQUMsV0FBakIsQ0FBNkIsU0FBQTtTQUN6QixNQUFPLENBQUEsUUFBQSxDQUFTLENBQUMsS0FBakIsR0FBeUI7QUFEQSxDQUE3Qjs7QUFHQSxTQUFBLEdBQVksSUFBSSxLQUFKLENBQ1I7RUFBQSxNQUFBLEVBQVEsTUFBTyxDQUFBLE9BQUEsQ0FBZjtFQUNBLEtBQUEsRUFBTyxLQURQO0VBRUEsSUFBQSxFQUFNLE1BRk47RUFHQSxLQUFBLEVBQU8sTUFBTyxDQUFBLE9BQUEsQ0FBUSxDQUFDLEtBSHZCO0VBSUEsTUFBQSxFQUFRLE1BQU8sQ0FBQSxPQUFBLENBQVEsQ0FBQyxNQUp4QjtDQURROztBQU9aLFNBQVMsQ0FBQyxLQUFWLEdBQ0k7RUFBQSxRQUFBLEVBQVUsTUFBVjtFQUNBLEtBQUEsRUFBTyxNQURQO0VBRUEsVUFBQSxFQUFZLFdBRlo7RUFHQSxPQUFBLEVBQVMsa0JBSFQ7OztBQU9KLElBQUEsR0FBTyxTQUFBO0VBQ0gsSUFBRyxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQW5CO1dBQ0ksTUFBTSxDQUFDLElBQVAsQ0FBWSxXQUFaLEVBQXlCO01BQUMsTUFBQSxFQUFRLFNBQVMsQ0FBQyxLQUFuQjtLQUF6QixFQURKOztBQURHOztBQUlQLE1BQU0sQ0FBQyxRQUFQLENBQWdCLFdBQWhCLEVBQTZCLFNBQUMsT0FBRDtBQUN6QixNQUFBO0FBQUE7QUFBQSxPQUFBLHFDQUFBOztJQUNJLEtBQUssQ0FBQyxPQUFOLENBQ0k7TUFBQSxDQUFBLEVBQUcsS0FBSyxDQUFDLENBQU4sR0FBVSxVQUFiO0tBREo7QUFESjtFQUdBLFlBQUEsR0FBZSxDQUFDLENBQUMsT0FBRixDQUFVLE9BQVY7RUFFZixDQUFBLEdBQUk7RUFDSixDQUFBLEdBQUk7QUFFSjtPQUFBLDRDQUFBOztJQUNJLENBQUEsb0NBQWE7SUFDYixJQUFBLEdBQU8sSUFBSSxTQUFKLENBQ0g7TUFBQSxDQUFBLEVBQUcsQ0FBSDtNQUNBLFNBQUEsRUFBVyxNQURYO01BRUEsQ0FBQSxFQUFHLE1BQU8sQ0FBQSxhQUFBLENBQWMsQ0FBQyxNQUF0QixHQUErQixDQUFBLEdBQUksQ0FGdEM7TUFHQSxJQUFBLEVBQU0sQ0FITjtNQUlBLEtBQUEsRUFBTyxNQUpQO01BS0EsSUFBQSxFQUFNLG9CQUxOO0tBREc7SUFPUCxJQUFJLENBQUMsTUFBTCxHQUFjLE1BQU0sQ0FBQztpQkFDckIsQ0FBQTtBQVZKOztBQVR5QixDQUE3Qjs7QUFxQkEsTUFBTyxDQUFBLFFBQUEsQ0FBUyxDQUFDLFNBQWpCLENBQTJCLFNBQUE7RUFDdkIsTUFBTyxDQUFBLFFBQUEsQ0FBUyxDQUFDLEtBQWpCLEdBQXlCO0VBQ3pCLElBQUEsQ0FBQTtTQUNBLFNBQVMsQ0FBQyxLQUFWLEdBQWtCO0FBSEssQ0FBM0I7O0FBS0EsUUFBUSxDQUFDLGdCQUFULENBQTBCLFVBQTFCLEVBQXNDLFNBQUMsS0FBRDtFQUNsQyxJQUFHLEtBQUssQ0FBQyxPQUFOLEtBQWlCLEVBQXBCO0lBQ0ksS0FBSyxDQUFDLGNBQU4sQ0FBQTtJQUNBLElBQUEsQ0FBQTtXQUNBLFNBQVMsQ0FBQyxLQUFWLEdBQWtCLEdBSHRCOztBQURrQyxDQUF0QyJ9\n","var _findAll, _getHierarchy, _match;\n\n_getHierarchy = function(layer) {\n  var a, i, len, ref, string;\n  string = '';\n  ref = layer.ancestors();\n  for (i = 0, len = ref.length; i < len; i++) {\n    a = ref[i];\n    string = a.name + '>' + string;\n  }\n  return string = string + layer.name;\n};\n\n_match = function(hierarchy, string) {\n  var regExp, regexString;\n  string = string.replace(/\\s*>\\s*/g, '>');\n  string = string.split('*').join('[^>]*');\n  string = string.split(' ').join('(?:.*)>');\n  string = string.split(',').join('$|');\n  regexString = \"(^|>)\" + string + \"$\";\n  regExp = new RegExp(regexString);\n  return hierarchy.match(regExp);\n};\n\n_findAll = function(selector, fromLayer) {\n  var layers, stringNeedsRegex;\n  layers = Framer.CurrentContext._layers;\n  if (selector != null) {\n    stringNeedsRegex = _.find(['*', ' ', '>', ','], function(c) {\n      return _.includes(selector, c);\n    });\n    if (!(stringNeedsRegex || fromLayer)) {\n      return layers = _.filter(layers, function(layer) {\n        if (layer.name === selector) {\n          return true;\n        }\n      });\n    } else {\n      return layers = _.filter(layers, function(layer) {\n        var hierarchy;\n        hierarchy = _getHierarchy(layer);\n        if (fromLayer != null) {\n          return _match(hierarchy, fromLayer.name + ' ' + selector);\n        } else {\n          return _match(hierarchy, selector);\n        }\n      });\n    }\n  } else {\n    return layers;\n  }\n};\n\nexports.Find = function(selector, fromLayer) {\n  return _findAll(selector, fromLayer)[0];\n};\n\nexports.ƒ = function(selector, fromLayer) {\n  return _findAll(selector, fromLayer)[0];\n};\n\nexports.FindAll = function(selector, fromLayer) {\n  return _findAll(selector, fromLayer);\n};\n\nexports.ƒƒ = function(selector, fromLayer) {\n  return _findAll(selector, fromLayer);\n};\n\nLayer.prototype.find = function(selector, fromLayer) {\n  return _findAll(selector, this)[0];\n};\n\nLayer.prototype.ƒ = function(selector, fromLayer) {\n  return _findAll(selector, this)[0];\n};\n\nLayer.prototype.findAll = function(selector, fromLayer) {\n  return _findAll(selector, this);\n};\n\nLayer.prototype.ƒƒ = function(selector, fromLayer) {\n  return _findAll(selector, this);\n};\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2plZmZyZXkuaGFycmlzL0RldmVsb3BtZW50L2ZyYW1lci1za2V0Y2gtZmlyZWJhc2UtYm9pbGVycGxhdGUvc3JjL21vZHVsZXMvZmluZE1vZHVsZS5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvamVmZnJleS5oYXJyaXMvRGV2ZWxvcG1lbnQvZnJhbWVyLXNrZXRjaC1maXJlYmFzZS1ib2lsZXJwbGF0ZS9zcmMvbW9kdWxlcy9maW5kTW9kdWxlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLGFBQUEsR0FBZ0IsU0FBQyxLQUFEO0FBQ2QsTUFBQTtFQUFBLE1BQUEsR0FBUztBQUNUO0FBQUEsT0FBQSxxQ0FBQTs7SUFDRSxNQUFBLEdBQVMsQ0FBQyxDQUFDLElBQUYsR0FBTyxHQUFQLEdBQVc7QUFEdEI7QUFFQSxTQUFPLE1BQUEsR0FBUyxNQUFBLEdBQU8sS0FBSyxDQUFDO0FBSmY7O0FBTWhCLE1BQUEsR0FBUyxTQUFDLFNBQUQsRUFBWSxNQUFaO0FBRVAsTUFBQTtFQUFBLE1BQUEsR0FBUyxNQUFNLENBQUMsT0FBUCxDQUFlLFVBQWYsRUFBMEIsR0FBMUI7RUFDVCxNQUFBLEdBQVMsTUFBTSxDQUFDLEtBQVAsQ0FBYSxHQUFiLENBQWlCLENBQUMsSUFBbEIsQ0FBdUIsT0FBdkI7RUFDVCxNQUFBLEdBQVMsTUFBTSxDQUFDLEtBQVAsQ0FBYSxHQUFiLENBQWlCLENBQUMsSUFBbEIsQ0FBdUIsU0FBdkI7RUFDVCxNQUFBLEdBQVMsTUFBTSxDQUFDLEtBQVAsQ0FBYSxHQUFiLENBQWlCLENBQUMsSUFBbEIsQ0FBdUIsSUFBdkI7RUFDVCxXQUFBLEdBQWMsT0FBQSxHQUFRLE1BQVIsR0FBZTtFQUU3QixNQUFBLEdBQVMsSUFBSSxNQUFKLENBQVcsV0FBWDtBQUNULFNBQU8sU0FBUyxDQUFDLEtBQVYsQ0FBZ0IsTUFBaEI7QUFUQTs7QUFXVCxRQUFBLEdBQVcsU0FBQyxRQUFELEVBQVcsU0FBWDtBQUNULE1BQUE7RUFBQSxNQUFBLEdBQVMsTUFBTSxDQUFDLGNBQWMsQ0FBQztFQUUvQixJQUFHLGdCQUFIO0lBQ0UsZ0JBQUEsR0FBbUIsQ0FBQyxDQUFDLElBQUYsQ0FBTyxDQUFDLEdBQUQsRUFBSyxHQUFMLEVBQVMsR0FBVCxFQUFhLEdBQWIsQ0FBUCxFQUEwQixTQUFDLENBQUQ7YUFBTyxDQUFDLENBQUMsUUFBRixDQUFXLFFBQVgsRUFBb0IsQ0FBcEI7SUFBUCxDQUExQjtJQUNuQixJQUFBLENBQUEsQ0FBTyxnQkFBQSxJQUFvQixTQUEzQixDQUFBO2FBQ0UsTUFBQSxHQUFTLENBQUMsQ0FBQyxNQUFGLENBQVMsTUFBVCxFQUFpQixTQUFDLEtBQUQ7UUFDeEIsSUFBRyxLQUFLLENBQUMsSUFBTixLQUFjLFFBQWpCO2lCQUErQixLQUEvQjs7TUFEd0IsQ0FBakIsRUFEWDtLQUFBLE1BQUE7YUFJRSxNQUFBLEdBQVMsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxNQUFULEVBQWlCLFNBQUMsS0FBRDtBQUN0QixZQUFBO1FBQUEsU0FBQSxHQUFZLGFBQUEsQ0FBYyxLQUFkO1FBQ1osSUFBRyxpQkFBSDtpQkFDRSxNQUFBLENBQU8sU0FBUCxFQUFrQixTQUFTLENBQUMsSUFBVixHQUFlLEdBQWYsR0FBbUIsUUFBckMsRUFERjtTQUFBLE1BQUE7aUJBR0UsTUFBQSxDQUFPLFNBQVAsRUFBa0IsUUFBbEIsRUFIRjs7TUFGc0IsQ0FBakIsRUFKWDtLQUZGO0dBQUEsTUFBQTtXQWFFLE9BYkY7O0FBSFM7O0FBb0JYLE9BQU8sQ0FBQyxJQUFSLEdBQWtCLFNBQUMsUUFBRCxFQUFXLFNBQVg7U0FBeUIsUUFBQSxDQUFTLFFBQVQsRUFBbUIsU0FBbkIsQ0FBOEIsQ0FBQSxDQUFBO0FBQXZEOztBQUNsQixPQUFPLENBQUMsQ0FBUixHQUFrQixTQUFDLFFBQUQsRUFBVyxTQUFYO1NBQXlCLFFBQUEsQ0FBUyxRQUFULEVBQW1CLFNBQW5CLENBQThCLENBQUEsQ0FBQTtBQUF2RDs7QUFFbEIsT0FBTyxDQUFDLE9BQVIsR0FBa0IsU0FBQyxRQUFELEVBQVcsU0FBWDtTQUF5QixRQUFBLENBQVMsUUFBVCxFQUFtQixTQUFuQjtBQUF6Qjs7QUFDbEIsT0FBTyxDQUFDLEVBQVIsR0FBa0IsU0FBQyxRQUFELEVBQVcsU0FBWDtTQUF5QixRQUFBLENBQVMsUUFBVCxFQUFtQixTQUFuQjtBQUF6Qjs7QUFHbEIsS0FBSyxDQUFBLFNBQUUsQ0FBQSxJQUFQLEdBQWtCLFNBQUMsUUFBRCxFQUFXLFNBQVg7U0FBeUIsUUFBQSxDQUFTLFFBQVQsRUFBbUIsSUFBbkIsQ0FBc0IsQ0FBQSxDQUFBO0FBQS9DOztBQUNsQixLQUFLLENBQUEsU0FBRSxDQUFBLENBQVAsR0FBa0IsU0FBQyxRQUFELEVBQVcsU0FBWDtTQUF5QixRQUFBLENBQVMsUUFBVCxFQUFtQixJQUFuQixDQUFzQixDQUFBLENBQUE7QUFBL0M7O0FBRWxCLEtBQUssQ0FBQSxTQUFFLENBQUEsT0FBUCxHQUFrQixTQUFDLFFBQUQsRUFBVyxTQUFYO1NBQXlCLFFBQUEsQ0FBUyxRQUFULEVBQW1CLElBQW5CO0FBQXpCOztBQUNsQixLQUFLLENBQUEsU0FBRSxDQUFBLEVBQVAsR0FBa0IsU0FBQyxRQUFELEVBQVcsU0FBWDtTQUF5QixRQUFBLENBQVMsUUFBVCxFQUFtQixJQUFuQjtBQUF6QiJ9\n","var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nexports.FirebaseFramer = (function(superClass) {\n  var getCORSurl, request;\n\n  extend(FirebaseFramer, superClass);\n\n  getCORSurl = function(server, path, secret, project) {\n    var url;\n    switch (Utils.isWebKit()) {\n      case true:\n        url = \"https://\" + server + path + \".json?auth=\" + secret + \"&ns=\" + project + \"&sse=true\";\n        break;\n      default:\n        url = \"https://\" + project + \".firebaseio.com\" + path + \".json?auth=\" + secret;\n    }\n    return url;\n  };\n\n  FirebaseFramer.define(\"status\", {\n    get: function() {\n      return this._status;\n    }\n  });\n\n  function FirebaseFramer(options) {\n    var base, base1, base2, base3;\n    this.options = options != null ? options : {};\n    this.projectID = (base = this.options).projectID != null ? base.projectID : base.projectID = null;\n    this.secret = (base1 = this.options).secret != null ? base1.secret : base1.secret = null;\n    this.server = (base2 = this.options).server != null ? base2.server : base2.server = void 0;\n    this.debug = (base3 = this.options).debug != null ? base3.debug : base3.debug = false;\n    if (this._status == null) {\n      this._status = \"disconnected\";\n    }\n    FirebaseFramer.__super__.constructor.apply(this, arguments);\n    if (this.server === void 0) {\n      Utils.domLoadJSON(\"https://\" + this.projectID + \".firebaseio.com/.settings/owner.json\", function(a, server) {\n        var msg;\n        print(msg = \"Add ______ server:\" + '   \"' + server + '\"' + \" _____ to your instance of Firebase.\");\n        if (this.debug) {\n          return console.log(\"Firebase: \" + msg);\n        }\n      });\n    }\n    if (this.debug) {\n      console.log(\"Firebase: Connecting to Firebase Project '\" + this.projectID + \"' ... \\n URL: '\" + (getCORSurl(this.server, \"/\", this.secret, this.projectID)) + \"'\");\n    }\n    this.onChange(\"connection\");\n  }\n\n  request = function(project, secret, path, callback, method, data, parameters, debug) {\n    var url, xhttp;\n    url = \"https://\" + project + \".firebaseio.com\" + path + \".json?auth=\" + secret;\n    if (parameters !== void 0) {\n      if (parameters.shallow) {\n        url += \"&shallow=true\";\n      }\n      if (parameters.format === \"export\") {\n        url += \"&format=export\";\n      }\n      switch (parameters.print) {\n        case \"pretty\":\n          url += \"&print=pretty\";\n          break;\n        case \"silent\":\n          url += \"&print=silent\";\n      }\n      if (typeof parameters.download === \"string\") {\n        url += \"&download=\" + parameters.download;\n        window.open(url, \"_self\");\n      }\n      if (typeof parameters.orderBy === \"string\") {\n        url += \"&orderBy=\" + '\"' + parameters.orderBy + '\"';\n      }\n      if (typeof parameters.limitToFirst === \"number\") {\n        url += \"&limitToFirst=\" + parameters.limitToFirst;\n      }\n      if (typeof parameters.limitToLast === \"number\") {\n        url += \"&limitToLast=\" + parameters.limitToLast;\n      }\n      if (typeof parameters.startAt === \"number\") {\n        url += \"&startAt=\" + parameters.startAt;\n      }\n      if (typeof parameters.endAt === \"number\") {\n        url += \"&endAt=\" + parameters.endAt;\n      }\n      if (typeof parameters.equalTo === \"number\") {\n        url += \"&equalTo=\" + parameters.equalTo;\n      }\n    }\n    xhttp = new XMLHttpRequest;\n    if (debug) {\n      console.log(\"Firebase: New '\" + method + \"'-request with data: '\" + (JSON.stringify(data)) + \"' \\n URL: '\" + url + \"'\");\n    }\n    xhttp.onreadystatechange = (function(_this) {\n      return function() {\n        if (parameters !== void 0) {\n          if (parameters.print === \"silent\" || typeof parameters.download === \"string\") {\n            return;\n          }\n        }\n        switch (xhttp.readyState) {\n          case 0:\n            if (debug) {\n              console.log(\"Firebase: Request not initialized \\n URL: '\" + url + \"'\");\n            }\n            break;\n          case 1:\n            if (debug) {\n              console.log(\"Firebase: Server connection established \\n URL: '\" + url + \"'\");\n            }\n            break;\n          case 2:\n            if (debug) {\n              console.log(\"Firebase: Request received \\n URL: '\" + url + \"'\");\n            }\n            break;\n          case 3:\n            if (debug) {\n              console.log(\"Firebase: Processing request \\n URL: '\" + url + \"'\");\n            }\n            break;\n          case 4:\n            if (callback != null) {\n              callback(JSON.parse(xhttp.responseText));\n            }\n            if (debug) {\n              console.log(\"Firebase: Request finished, response: '\" + (JSON.parse(xhttp.responseText)) + \"' \\n URL: '\" + url + \"'\");\n            }\n        }\n        if (xhttp.status === \"404\") {\n          if (debug) {\n            return console.warn(\"Firebase: Invalid request, page not found \\n URL: '\" + url + \"'\");\n          }\n        }\n      };\n    })(this);\n    xhttp.open(method, url, true);\n    xhttp.setRequestHeader(\"Content-type\", \"application/json; charset=utf-8\");\n    return xhttp.send(data = \"\" + (JSON.stringify(data)));\n  };\n\n  FirebaseFramer.prototype.get = function(path, callback, parameters) {\n    return request(this.projectID, this.secret, path, callback, \"GET\", null, parameters, this.debug);\n  };\n\n  FirebaseFramer.prototype.put = function(path, data, callback, parameters) {\n    return request(this.projectID, this.secret, path, callback, \"PUT\", data, parameters, this.debug);\n  };\n\n  FirebaseFramer.prototype.post = function(path, data, callback, parameters) {\n    return request(this.projectID, this.secret, path, callback, \"POST\", data, parameters, this.debug);\n  };\n\n  FirebaseFramer.prototype.patch = function(path, data, callback, parameters) {\n    return request(this.projectID, this.secret, path, callback, \"PATCH\", data, parameters, this.debug);\n  };\n\n  FirebaseFramer.prototype[\"delete\"] = function(path, callback, parameters) {\n    return request(this.projectID, this.secret, path, callback, \"DELETE\", null, parameters, this.debug);\n  };\n\n  FirebaseFramer.prototype.onChange = function(path, callback) {\n    var currentStatus, source, url;\n    if (path === \"connection\") {\n      url = getCORSurl(this.server, \"/\", this.secret, this.projectID);\n      currentStatus = \"disconnected\";\n      source = new EventSource(url);\n      source.addEventListener(\"open\", (function(_this) {\n        return function() {\n          if (currentStatus === \"disconnected\") {\n            _this._status = \"connected\";\n            if (callback != null) {\n              callback(\"connected\");\n            }\n            if (_this.debug) {\n              console.log(\"Firebase: Connection to Firebase Project '\" + _this.projectID + \"' established\");\n            }\n          }\n          return currentStatus = \"connected\";\n        };\n      })(this));\n      return source.addEventListener(\"error\", (function(_this) {\n        return function() {\n          if (currentStatus === \"connected\") {\n            _this._status = \"disconnected\";\n            if (callback != null) {\n              callback(\"disconnected\");\n            }\n            if (_this.debug) {\n              console.warn(\"Firebase: Connection to Firebase Project '\" + _this.projectID + \"' closed\");\n            }\n          }\n          return currentStatus = \"disconnected\";\n        };\n      })(this));\n    } else {\n      url = getCORSurl(this.server, path, this.secret, this.projectID);\n      source = new EventSource(url);\n      if (this.debug) {\n        console.log(\"Firebase: Listening to changes made to '\" + path + \"' \\n URL: '\" + url + \"'\");\n      }\n      source.addEventListener(\"put\", (function(_this) {\n        return function(ev) {\n          if (callback != null) {\n            callback(JSON.parse(ev.data).data, \"put\", JSON.parse(ev.data).patch);\n          }\n          if (_this.debug) {\n            return console.log(\"Firebase: Received changes made to '\" + path + \"' via 'PUT': \" + (JSON.parse(ev.data).data) + \" \\n URL: '\" + url + \"'\");\n          }\n        };\n      })(this));\n      return source.addEventListener(\"patch\", (function(_this) {\n        return function(ev) {\n          if (callback != null) {\n            callback(JSON.parse(ev.data).data, \"patch\", JSON.parse(ev.data).patch);\n          }\n          if (_this.debug) {\n            return console.log(\"Firebase: Received changes made to '\" + path + \"' via 'PATCH': \" + (JSON.parse(ev.data).data) + \" \\n URL: '\" + url + \"'\");\n          }\n        };\n      })(this));\n    }\n  };\n\n  return FirebaseFramer;\n\n})(Framer.BaseClass);\n\n//# sourceMappingURL=data:application/json;base64,\n","var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nexports.Input = (function(superClass) {\n  extend(Input, superClass);\n\n  Input.define(\"style\", {\n    get: function() {\n      return this.input.style;\n    },\n    set: function(value) {\n      return _.extend(this.input.style, value);\n    }\n  });\n\n  Input.define(\"value\", {\n    get: function() {\n      return this.input.value;\n    },\n    set: function(value) {\n      return this.input.value = value;\n    }\n  });\n\n  function Input(options) {\n    if (options == null) {\n      options = {};\n    }\n    if (options.setup == null) {\n      options.setup = false;\n    }\n    if (options.width == null) {\n      options.width = Screen.width;\n    }\n    if (options.clip == null) {\n      options.clip = false;\n    }\n    if (options.height == null) {\n      options.height = 60;\n    }\n    if (options.backgroundColor == null) {\n      options.backgroundColor = options.setup ? \"rgba(255, 60, 47, .5)\" : \"transparent\";\n    }\n    if (options.fontSize == null) {\n      options.fontSize = 30;\n    }\n    if (options.lineHeight == null) {\n      options.lineHeight = 30;\n    }\n    if (options.padding == null) {\n      options.padding = 10;\n    }\n    if (options.fontFamily == null) {\n      options.fontFamily = \"\";\n    }\n    if (options.opacity == null) {\n      options.opacity = 1;\n    }\n    if (options.text == null) {\n      options.text = \"\";\n    }\n    if (options.placeholder == null) {\n      options.placeholder = \"\";\n    }\n    if (options.type == null) {\n      options.type = \"text\";\n    }\n    Input.__super__.constructor.call(this, options);\n    if (options.placeholderColor != null) {\n      this.placeholderColor = options.placeholderColor;\n    }\n    this.input = document.createElement(\"input\");\n    this.input.id = \"input-\" + (_.now());\n    this.input.style.cssText = \"font-size: \" + options.fontSize + \"px; line-height: \" + options.lineHeight + \"px; padding: \" + options.padding + \"px; width: \" + options.width + \"px; height: \" + options.height + \"px; border: none; outline-width: 0; background-image: url(about:blank); background-color: \" + options.backgroundColor + \"; font-family: \" + options.fontFamily + \"; opacity: \" + options.opacity + \";\";\n    this.input.value = options.text;\n    this.input.type = options.type;\n    this.input.placeholder = options.placeholder;\n    this.form = document.createElement(\"form\");\n    this.form.appendChild(this.input);\n    this._element.appendChild(this.form);\n    this.backgroundColor = \"transparent\";\n    if (this.placeholderColor) {\n      this.updatePlaceholderColor(options.placeholderColor);\n    }\n  }\n\n  Input.prototype.updatePlaceholderColor = function(color) {\n    var css;\n    this.placeholderColor = color;\n    if (this.pageStyle != null) {\n      document.head.removeChild(this.pageStyle);\n    }\n    this.pageStyle = document.createElement(\"style\");\n    this.pageStyle.type = \"text/css\";\n    css = \"#\" + this.input.id + \"::-webkit-input-placeholder { color: \" + this.placeholderColor + \"; }\";\n    this.pageStyle.appendChild(document.createTextNode(css));\n    return document.head.appendChild(this.pageStyle);\n  };\n\n  Input.prototype.focus = function() {\n    return this.input.focus();\n  };\n\n  return Input;\n\n})(Layer);\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2plZmZyZXkuaGFycmlzL0RldmVsb3BtZW50L2ZyYW1lci1za2V0Y2gtZmlyZWJhc2UtYm9pbGVycGxhdGUvc3JjL21vZHVsZXMvaW5wdXRmaWVsZC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvamVmZnJleS5oYXJyaXMvRGV2ZWxvcG1lbnQvZnJhbWVyLXNrZXRjaC1maXJlYmFzZS1ib2lsZXJwbGF0ZS9zcmMvbW9kdWxlcy9pbnB1dGZpZWxkLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxJQUFBOzs7QUFBTSxPQUFPLENBQUM7OztFQUNiLEtBQUMsQ0FBQSxNQUFELENBQVEsT0FBUixFQUNDO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLEtBQUQ7YUFDSixDQUFDLENBQUMsTUFBRixDQUFTLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBaEIsRUFBdUIsS0FBdkI7SUFESSxDQURMO0dBREQ7O0VBS0EsS0FBQyxDQUFBLE1BQUQsQ0FBUSxPQUFSLEVBQ0M7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFBVixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsS0FBRDthQUNKLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBUCxHQUFlO0lBRFgsQ0FETDtHQUREOztFQUthLGVBQUMsT0FBRDs7TUFBQyxVQUFVOzs7TUFDdkIsT0FBTyxDQUFDLFFBQVM7OztNQUNqQixPQUFPLENBQUMsUUFBUyxNQUFNLENBQUM7OztNQUN4QixPQUFPLENBQUMsT0FBUTs7O01BQ2hCLE9BQU8sQ0FBQyxTQUFVOzs7TUFDbEIsT0FBTyxDQUFDLGtCQUFzQixPQUFPLENBQUMsS0FBWCxHQUFzQix1QkFBdEIsR0FBbUQ7OztNQUM5RSxPQUFPLENBQUMsV0FBWTs7O01BQ3BCLE9BQU8sQ0FBQyxhQUFjOzs7TUFD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\n","var Slice, _assets, _layers, _slices, assignConstraints, getObject, getParents, groups, makeLayerFromParent, ref, slices, updateConstraints, ƒ, ƒƒ,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nref = require('findModule'), ƒ = ref.ƒ, ƒƒ = ref.ƒƒ;\n\n_slices = Utils.domLoadJSONSync(\"slices.json\");\n\n_assets = Utils.domLoadJSONSync(\"assets.json\");\n\n_layers = Utils.domLoadJSONSync(\"layers.json\");\n\nSlice = (function(superClass) {\n  extend(Slice, superClass);\n\n  function Slice(options) {\n    var base;\n    this.options = options != null ? options : {};\n    if ((base = this.options).sketch_id == null) {\n      base.sketch_id = \"111\";\n    }\n    this.options.constraints = {};\n    Slice.__super__.constructor.call(this, this.options);\n    this.sketch_id = this.options.sketch_id;\n    this.constraints = this.options.constraints;\n  }\n\n  return Slice;\n\n})(Layer);\n\nmakeLayerFromParent = function(item) {\n  var layer, matches, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8;\n  layer = null;\n  if (item.name != null) {\n    matches = ƒƒ(item.name);\n  } else {\n    return layer;\n  }\n  switch (matches.length) {\n    case 0:\n      slices[item.name] = new Slice({\n        name: item.name,\n        x: (ref1 = (ref2 = item.relative) != null ? ref2.x : void 0) != null ? ref1 : 0,\n        y: (ref3 = (ref4 = item.relative) != null ? ref4.y : void 0) != null ? ref3 : 0,\n        width: (ref5 = (ref6 = item.relative) != null ? ref6.width : void 0) != null ? ref5 : Canvas.width,\n        height: (ref7 = (ref8 = item.relative) != null ? ref8.height : void 0) != null ? ref7 : Canvas.height,\n        sketch_id: item.id,\n        backgroundColor: \"transparent\"\n      });\n      layer = slices[item.name];\n      break;\n    case 1:\n      layer = matches[0];\n  }\n  return layer;\n};\n\ngetObject = function(object, key, value) {\n  var i, prop, result;\n  result = null;\n  if (object instanceof Array) {\n    i = 0;\n    while (i < object.length) {\n      result = getObject(object[i], key, value);\n      if (result) {\n        break;\n      }\n      i++;\n    }\n  } else {\n    for (prop in object) {\n      if (prop === key) {\n        if (!value) {\n          return object;\n        }\n        if (object[prop] === value) {\n          return object;\n        }\n      }\n      if (object[prop] instanceof Object || object[prop] instanceof Array) {\n        result = getObject(object[prop], key, value);\n        if (result) {\n          break;\n        }\n      }\n    }\n  }\n  return result;\n};\n\ngetParents = function(object, list) {\n  var layer, layers, parent, parent_slice_list, prop, results, slice;\n  results = [];\n  for (prop in object) {\n    if (object[prop].hasOwnProperty(\"layers\")) {\n      layers = object[prop].layers;\n      results.push((function() {\n        var j, len, obj, results1;\n        results1 = [];\n        for (j = 0, len = layers.length; j < len; j++) {\n          layer = layers[j];\n          for (slice in list) {\n            if (layer.id === list[slice].sketch_id) {\n              parent = makeLayerFromParent(object[prop]);\n              if (parent != null) {\n                list[slice].parent = parent;\n                parent_slice_list = (\n                  obj = {},\n                  obj[\"\" + parent.name] = slices[parent.name],\n                  obj\n                );\n                getParents(_layers, parent_slice_list);\n              }\n            }\n          }\n          results1.push(getParents(layers, list));\n        }\n        return results1;\n      })());\n    } else {\n      results.push(getParents(object[prop], list));\n    }\n  }\n  return results;\n};\n\nassignConstraints = function(s) {\n  var anima, asset, constraints, ref1, ref2;\n  asset = getObject(_assets, \"objectID\", s.sketch_id);\n  anima = asset != null ? (ref1 = asset.userInfo) != null ? ref1[\"com.animaapp.stc-sketch-plugin\"] : void 0 : void 0;\n  constraints = anima != null ? (ref2 = anima.kModelPropertiesKey) != null ? ref2.constraints : void 0 : void 0;\n  if (constraints != null) {\n    return s.constraints = constraints;\n  }\n};\n\nupdateConstraints = function(s) {\n  var c, constant, container, multiplier, ref1, ref2, results;\n  container = s.parent;\n  results = [];\n  for (c in s.constraints) {\n    switch (c) {\n      case \"top\":\n        if (s.constraints[c].multiplier != null) {\n          multiplier = s.constraints[c].multiplier;\n        }\n        if (s.constraints[c].constant != null) {\n          constant = s.constraints[c].constant;\n        }\n        if (multiplier != null) {\n          s.y = Align.top(container.height * multiplier);\n          container.on(\"change:height\", function() {\n            return s.y = Align.top(container.height * multiplier);\n          });\n        }\n        if (constant != null) {\n          s.y = Align.top(constant);\n          results.push(container.on(\"change:height\", function() {\n            return s.y = Align.top(constant);\n          }));\n        } else {\n          results.push(void 0);\n        }\n        break;\n      case \"bottom\":\n        if (s.constraints[c].multiplier != null) {\n          multiplier = s.constraints[c].multiplier;\n        }\n        if (s.constraints[c].constant != null) {\n          constant = s.constraints[c].constant;\n        }\n        if (multiplier != null) {\n          s.y = Align.bottom(container.height * multiplier);\n          container.on(\"change:height\", function() {\n            return s.y = Align.bottom(container.height * multiplier);\n          });\n        }\n        if (constant != null) {\n          s.y = Align.bottom(-constant);\n          results.push(container.on(\"change:height\", function() {\n            return s.y = Align.bottom(-constant);\n          }));\n        } else {\n          results.push(void 0);\n        }\n        break;\n      case \"left\":\n        if (s.constraints[c].multiplier != null) {\n          multiplier = s.constraints[c].multiplier;\n        }\n        if (s.constraints[c].constant != null) {\n          constant = s.constraints[c].constant;\n        }\n        if (multiplier != null) {\n          s.x = Align.left(container.height * multiplier);\n          container.on(\"change:width\", function() {\n            return s.x = Align.left(container.height * multiplier);\n          });\n        }\n        if (constant != null) {\n          s.x = Align.left(constant);\n          results.push(container.on(\"change:width\", function() {\n            return s.x = Align.left(constant);\n          }));\n        } else {\n          results.push(void 0);\n        }\n        break;\n      case \"right\":\n        if (s.constraints[c].multiplier != null) {\n          multiplier = s.constraints[c].multiplier;\n        }\n        if (s.constraints[c].constant != null) {\n          constant = s.constraints[c].constant;\n        }\n        if (multiplier != null) {\n          s.x = Align.right(container.height * multiplier);\n          container.on(\"change:width\", function() {\n            return s.x = Align.right(container.height * multiplier);\n          });\n        }\n        if (constant != null) {\n          s.x = Align.right(-constant);\n          results.push(container.on(\"change:width\", function() {\n            return s.x = Align.right(-constant);\n          }));\n        } else {\n          results.push(void 0);\n        }\n        break;\n      case \"width\":\n        if (s.constraints[c].multiplier != null) {\n          multiplier = s.constraints[c].multiplier;\n        }\n        if (s.constraints[c].constant != null) {\n          constant = s.constraints[c].constant;\n        }\n        if (constant) {\n          results.push(s.width = constant);\n        } else {\n          s.width = container.width * multiplier;\n          results.push(container.on(\"change:width\", function() {\n            return s.width = container.width * multiplier;\n          }));\n        }\n        break;\n      case \"height\":\n        if (s.constraints[c].multiplier != null) {\n          multiplier = s.constraints[c].multiplier;\n        }\n        if (s.constraints[c].constant != null) {\n          constant = s.constraints[c].constant;\n        }\n        if (constant) {\n          results.push(s.height = constant);\n        } else {\n          s.height = container.height * multiplier;\n          results.push(container.on(\"change:height\", function() {\n            return s.height = container.height * multiplier;\n          }));\n        }\n        break;\n      case \"centerHorizontally\":\n        constant = (ref1 = s.constraints[c].constant) != null ? ref1 : 0;\n        results.push(s.x = Align.center(constant));\n        break;\n      case \"centerVertically\":\n        constant = (ref2 = s.constraints[c].constant) != null ? ref2 : 0;\n        results.push(s.y = Align.center(constant));\n        break;\n      default:\n        break;\n    }\n  }\n  return results;\n};\n\nslices = {};\n\ngroups = {};\n\nexports.sketchSlicer = function() {\n  var child, j, k, len, len1, ref1, ref2, slice;\n  ref1 = _slices.pages[0].slices;\n  for (j = 0, len = ref1.length; j < len; j++) {\n    slice = ref1[j];\n    slices[slice.name] = new Slice({\n      name: slice.name,\n      image: \"images/\" + slice.name + \".png\",\n      sketch_id: slice.id,\n      x: slice.relative.x,\n      y: slice.relative.y,\n      width: slice.relative.width,\n      height: slice.relative.height\n    });\n  }\n  getParents(_layers, slices);\n  slices[\"canvas\"].width = Canvas.width;\n  slices[\"canvas\"].height = Canvas.height;\n  Canvas.on(\"change:size\", function() {\n    return slices[\"canvas\"].size = Canvas.size;\n  });\n  ref2 = slices[\"canvas\"].children;\n  for (k = 0, len1 = ref2.length; k < len1; k++) {\n    child = ref2[k];\n    slices[\"canvas\"].on(\"change:size\", function() {\n      return child.size = slices[\"canvas\"].size;\n    });\n  }\n  for (slice in slices) {\n    assignConstraints(slices[slice]);\n  }\n  for (slice in slices) {\n    updateConstraints(slices[slice]);\n  }\n  return slices;\n};\n\n//# sourceMappingURL=data:application/json;base64,\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset:utf-8;base64,"}