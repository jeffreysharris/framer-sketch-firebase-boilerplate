{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app.coffee","src/modules/firebaseframer.coffee","src/modules/inputfield.coffee"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxfile":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var FirebaseFramer, HEIGHT, Input, WIDTH, bg, button, demoDB, field, footer, stream, textfield;\n\nFirebaseFramer = require('firebaseframer').FirebaseFramer;\n\nInput = require(\"inputfield\").Input;\n\nWIDTH = Framer.Screen.width;\n\nHEIGHT = Framer.Screen.height;\n\nFramer.Defaults.Animation = {\n  curve: 'spring(150, 10, 0)'\n};\n\ndemoDB = new FirebaseFramer({\n  projectID: \"framer-sketch-firebase-test\",\n  secret: \"lHwsK4ljhwUmMt3EU1ybrMPQcSDgbKhvTIwuqJ9I\",\n  server: \"s-usc1c-nss-134.firebaseio.com\"\n});\n\nbg = new BackgroundLayer({\n  backgroundColor: \"#fafafa\"\n});\n\nfooter = new Layer({\n  x: 0,\n  y: Canvas.height - 230,\n  width: Canvas.width,\n  height: 230,\n  backgroundColor: \"#999\"\n});\n\nstream = new Layer({\n  x: 0,\n  y: 0,\n  width: Canvas.width,\n  height: Canvas.height - 230,\n  backgroundColor: \"#fafafa\"\n});\n\nbutton = new Layer({\n  x: 620,\n  y: Canvas.height - 200,\n  width: 50,\n  height: 50,\n  image: \"images/button.png\"\n});\n\nbutton.onMouseDown(function() {\n  return button.image = \"images/button-down.png\";\n});\n\nfield = new Layer({\n  x: 100,\n  y: Canvas.height - 200,\n  width: 520,\n  height: 50,\n  image: \"images/field.png\"\n});\n\ntextfield = new Input({\n  setup: false,\n  type: \"text\",\n  x: 100,\n  y: Canvas.height - 200,\n  width: 500,\n  height: 30\n});\n\ntextfield.style = {\n  fontSize: \"14px\",\n  color: \"#333\",\n  fontFamily: \"Helvetica\",\n  padding: \"10px 10px 10px 20px\"\n};\n\ndemoDB.get('/messages', function(messages) {\n  var h, i, j, line, message, messageArray, results;\n  messageArray = _.toArray(messages);\n  h = 30;\n  i = 1;\n  results = [];\n  for (j = messageArray.length - 1; j >= 0; j += -1) {\n    message = messageArray[j];\n    line = new TextLayer({\n      x: 120,\n      textAlign: \"left\",\n      y: Canvas.height - 250 - h * i,\n      text: message.text,\n      color: \"#333\",\n      font: \"14px/1.5 Helvetica\"\n    });\n    results.push(i++);\n  }\n  return results;\n});\n\npost(function() {\n  return demoDB.post('/messages', {\n    \"text\": textfield.value\n  });\n});\n\nbutton.onMouseUp(function() {\n  button.image = \"images/button.png\";\n  return post;\n});\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2plZmZyZXkuaGFycmlzL0RldmVsb3BtZW50L2ZyYW1lci1za2V0Y2gtZmlyZWJhc2UtYm9pbGVycGxhdGUvc3JjL2FwcC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvamVmZnJleS5oYXJyaXMvRGV2ZWxvcG1lbnQvZnJhbWVyLXNrZXRjaC1maXJlYmFzZS1ib2lsZXJwbGF0ZS9zcmMvYXBwLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFDLGlCQUFrQixPQUFBLENBQVEsZ0JBQVI7O0FBQ2xCLFFBQVMsT0FBQSxDQUFRLFlBQVI7O0FBRVYsS0FBQSxHQUFRLE1BQU0sQ0FBQyxNQUFNLENBQUM7O0FBQ3RCLE1BQUEsR0FBUyxNQUFNLENBQUMsTUFBTSxDQUFDOztBQUV2QixNQUFNLENBQUMsUUFBUSxDQUFDLFNBQWhCLEdBQ0U7RUFBQSxLQUFBLEVBQU8sb0JBQVA7OztBQUVGLE1BQUEsR0FBUyxJQUFJLGNBQUosQ0FDUjtFQUFBLFNBQUEsRUFBVyw2QkFBWDtFQUNBLE1BQUEsRUFBUSwwQ0FEUjtFQUVBLE1BQUEsRUFBUSxnQ0FGUjtDQURROztBQUtULEVBQUEsR0FBSyxJQUFJLGVBQUosQ0FDRDtFQUFBLGVBQUEsRUFBaUIsU0FBakI7Q0FEQzs7QUFHTCxNQUFBLEdBQVMsSUFBSSxLQUFKLENBQ0w7RUFBQSxDQUFBLEVBQUksQ0FBSjtFQUNBLENBQUEsRUFBSSxNQUFNLENBQUMsTUFBUCxHQUFnQixHQURwQjtFQUVBLEtBQUEsRUFBTyxNQUFNLENBQUMsS0FGZDtFQUdBLE1BQUEsRUFBUSxHQUhSO0VBSUEsZUFBQSxFQUFpQixNQUpqQjtDQURLOztBQU9ULE1BQUEsR0FBUyxJQUFJLEtBQUosQ0FDTDtFQUFBLENBQUEsRUFBRyxDQUFIO0VBQ0EsQ0FBQSxFQUFHLENBREg7RUFFQSxLQUFBLEVBQU8sTUFBTSxDQUFDLEtBRmQ7RUFHQSxNQUFBLEVBQVEsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsR0FIeEI7RUFJQSxlQUFBLEVBQWlCLFNBSmpCO0NBREs7O0FBdUJULE1BQUEsR0FBUyxJQUFJLEtBQUosQ0FDTDtFQUFBLENBQUEsRUFBRyxHQUFIO0VBQ0EsQ0FBQSxFQUFHLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLEdBRG5CO0VBRUEsS0FBQSxFQUFPLEVBRlA7RUFHQSxNQUFBLEVBQVEsRUFIUjtFQUlBLEtBQUEsRUFBTyxtQkFKUDtDQURLOztBQU9ULE1BQU0sQ0FBQyxXQUFQLENBQW1CLFNBQUE7U0FDZixNQUFNLENBQUMsS0FBUCxHQUFlO0FBREEsQ0FBbkI7O0FBR0EsS0FBQSxHQUFRLElBQUksS0FBSixDQUNKO0VBQUEsQ0FBQSxFQUFHLEdBQUg7RUFDQSxDQUFBLEVBQUcsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsR0FEbkI7RUFFQSxLQUFBLEVBQU8sR0FGUDtFQUdBLE1BQUEsRUFBUSxFQUhSO0VBSUEsS0FBQSxFQUFPLGtCQUpQO0NBREk7O0FBT1IsU0FBQSxHQUFZLElBQUksS0FBSixDQUNSO0VBQUEsS0FBQSxFQUFPLEtBQVA7RUFDQSxJQUFBLEVBQU0sTUFETjtFQUVBLENBQUEsRUFBRyxHQUZIO0VBR0EsQ0FBQSxFQUFHLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLEdBSG5CO0VBSUEsS0FBQSxFQUFPLEdBSlA7RUFLQSxNQUFBLEVBQVEsRUFMUjtDQURROztBQVFaLFNBQVMsQ0FBQyxLQUFWLEdBQ0k7RUFBQSxRQUFBLEVBQVUsTUFBVjtFQUNBLEtBQUEsRUFBTyxNQURQO0VBRUEsVUFBQSxFQUFZLFdBRlo7RUFHQSxPQUFBLEVBQVMscUJBSFQ7OztBQU9KLE1BQU0sQ0FBQyxHQUFQLENBQVcsV0FBWCxFQUF3QixTQUFDLFFBQUQ7QUFFcEIsTUFBQTtFQUFBLFlBQUEsR0FBZSxDQUFDLENBQUMsT0FBRixDQUFVLFFBQVY7RUFFZixDQUFBLEdBQUk7RUFDSixDQUFBLEdBQUk7QUFDSjtPQUFBLDRDQUFBOztJQUVJLElBQUEsR0FBTyxJQUFJLFNBQUosQ0FDSDtNQUFBLENBQUEsRUFBRyxHQUFIO01BQ0EsU0FBQSxFQUFXLE1BRFg7TUFFQSxDQUFBLEVBQUcsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsR0FBaEIsR0FBc0IsQ0FBQSxHQUFJLENBRjdCO01BR0EsSUFBQSxFQUFNLE9BQU8sQ0FBQyxJQUhkO01BSUEsS0FBQSxFQUFPLE1BSlA7TUFLQSxJQUFBLEVBQU0sb0JBTE47S0FERztpQkFPUCxDQUFBO0FBVEo7O0FBTm9CLENBQXhCOztBQWlCQSxJQUFBLENBQUssU0FBQTtTQUNELE1BQU0sQ0FBQyxJQUFQLENBQVksV0FBWixFQUF5QjtJQUFDLE1BQUEsRUFBUSxTQUFTLENBQUMsS0FBbkI7R0FBekI7QUFEQyxDQUFMOztBQUdBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLFNBQUE7RUFDYixNQUFNLENBQUMsS0FBUCxHQUFlO1NBQ2Y7QUFGYSxDQUFqQiJ9\n","var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nexports.FirebaseFramer = (function(superClass) {\n  var getCORSurl, request;\n\n  extend(FirebaseFramer, superClass);\n\n  getCORSurl = function(server, path, secret, project) {\n    var url;\n    switch (Utils.isWebKit()) {\n      case true:\n        url = \"https://\" + server + path + \".json?auth=\" + secret + \"&ns=\" + project + \"&sse=true\";\n        break;\n      default:\n        url = \"https://\" + project + \".firebaseio.com\" + path + \".json?auth=\" + secret;\n    }\n    return url;\n  };\n\n  FirebaseFramer.define(\"status\", {\n    get: function() {\n      return this._status;\n    }\n  });\n\n  function FirebaseFramer(options) {\n    var base, base1, base2, base3;\n    this.options = options != null ? options : {};\n    this.projectID = (base = this.options).projectID != null ? base.projectID : base.projectID = null;\n    this.secret = (base1 = this.options).secret != null ? base1.secret : base1.secret = null;\n    this.server = (base2 = this.options).server != null ? base2.server : base2.server = void 0;\n    this.debug = (base3 = this.options).debug != null ? base3.debug : base3.debug = false;\n    if (this._status == null) {\n      this._status = \"disconnected\";\n    }\n    FirebaseFramer.__super__.constructor.apply(this, arguments);\n    if (this.server === void 0) {\n      Utils.domLoadJSON(\"https://\" + this.projectID + \".firebaseio.com/.settings/owner.json\", function(a, server) {\n        var msg;\n        print(msg = \"Add ______ server:\" + '   \"' + server + '\"' + \" _____ to your instance of Firebase.\");\n        if (this.debug) {\n          return console.log(\"Firebase: \" + msg);\n        }\n      });\n    }\n    if (this.debug) {\n      console.log(\"Firebase: Connecting to Firebase Project '\" + this.projectID + \"' ... \\n URL: '\" + (getCORSurl(this.server, \"/\", this.secret, this.projectID)) + \"'\");\n    }\n    this.onChange(\"connection\");\n  }\n\n  request = function(project, secret, path, callback, method, data, parameters, debug) {\n    var url, xhttp;\n    url = \"https://\" + project + \".firebaseio.com\" + path + \".json?auth=\" + secret;\n    if (parameters !== void 0) {\n      if (parameters.shallow) {\n        url += \"&shallow=true\";\n      }\n      if (parameters.format === \"export\") {\n        url += \"&format=export\";\n      }\n      switch (parameters.print) {\n        case \"pretty\":\n          url += \"&print=pretty\";\n          break;\n        case \"silent\":\n          url += \"&print=silent\";\n      }\n      if (typeof parameters.download === \"string\") {\n        url += \"&download=\" + parameters.download;\n        window.open(url, \"_self\");\n      }\n      if (typeof parameters.orderBy === \"string\") {\n        url += \"&orderBy=\" + '\"' + parameters.orderBy + '\"';\n      }\n      if (typeof parameters.limitToFirst === \"number\") {\n        url += \"&limitToFirst=\" + parameters.limitToFirst;\n      }\n      if (typeof parameters.limitToLast === \"number\") {\n        url += \"&limitToLast=\" + parameters.limitToLast;\n      }\n      if (typeof parameters.startAt === \"number\") {\n        url += \"&startAt=\" + parameters.startAt;\n      }\n      if (typeof parameters.endAt === \"number\") {\n        url += \"&endAt=\" + parameters.endAt;\n      }\n      if (typeof parameters.equalTo === \"number\") {\n        url += \"&equalTo=\" + parameters.equalTo;\n      }\n    }\n    xhttp = new XMLHttpRequest;\n    if (debug) {\n      console.log(\"Firebase: New '\" + method + \"'-request with data: '\" + (JSON.stringify(data)) + \"' \\n URL: '\" + url + \"'\");\n    }\n    xhttp.onreadystatechange = (function(_this) {\n      return function() {\n        if (parameters !== void 0) {\n          if (parameters.print === \"silent\" || typeof parameters.download === \"string\") {\n            return;\n          }\n        }\n        switch (xhttp.readyState) {\n          case 0:\n            if (debug) {\n              console.log(\"Firebase: Request not initialized \\n URL: '\" + url + \"'\");\n            }\n            break;\n          case 1:\n            if (debug) {\n              console.log(\"Firebase: Server connection established \\n URL: '\" + url + \"'\");\n            }\n            break;\n          case 2:\n            if (debug) {\n              console.log(\"Firebase: Request received \\n URL: '\" + url + \"'\");\n            }\n            break;\n          case 3:\n            if (debug) {\n              console.log(\"Firebase: Processing request \\n URL: '\" + url + \"'\");\n            }\n            break;\n          case 4:\n            if (callback != null) {\n              callback(JSON.parse(xhttp.responseText));\n            }\n            if (debug) {\n              console.log(\"Firebase: Request finished, response: '\" + (JSON.parse(xhttp.responseText)) + \"' \\n URL: '\" + url + \"'\");\n            }\n        }\n        if (xhttp.status === \"404\") {\n          if (debug) {\n            return console.warn(\"Firebase: Invalid request, page not found \\n URL: '\" + url + \"'\");\n          }\n        }\n      };\n    })(this);\n    xhttp.open(method, url, true);\n    xhttp.setRequestHeader(\"Content-type\", \"application/json; charset=utf-8\");\n    return xhttp.send(data = \"\" + (JSON.stringify(data)));\n  };\n\n  FirebaseFramer.prototype.get = function(path, callback, parameters) {\n    return request(this.projectID, this.secret, path, callback, \"GET\", null, parameters, this.debug);\n  };\n\n  FirebaseFramer.prototype.put = function(path, data, callback, parameters) {\n    return request(this.projectID, this.secret, path, callback, \"PUT\", data, parameters, this.debug);\n  };\n\n  FirebaseFramer.prototype.post = function(path, data, callback, parameters) {\n    return request(this.projectID, this.secret, path, callback, \"POST\", data, parameters, this.debug);\n  };\n\n  FirebaseFramer.prototype.patch = function(path, data, callback, parameters) {\n    return request(this.projectID, this.secret, path, callback, \"PATCH\", data, parameters, this.debug);\n  };\n\n  FirebaseFramer.prototype[\"delete\"] = function(path, callback, parameters) {\n    return request(this.projectID, this.secret, path, callback, \"DELETE\", null, parameters, this.debug);\n  };\n\n  FirebaseFramer.prototype.onChange = function(path, callback) {\n    var currentStatus, source, url;\n    if (path === \"connection\") {\n      url = getCORSurl(this.server, \"/\", this.secret, this.projectID);\n      currentStatus = \"disconnected\";\n      source = new EventSource(url);\n      source.addEventListener(\"open\", (function(_this) {\n        return function() {\n          if (currentStatus === \"disconnected\") {\n            _this._status = \"connected\";\n            if (callback != null) {\n              callback(\"connected\");\n            }\n            if (_this.debug) {\n              console.log(\"Firebase: Connection to Firebase Project '\" + _this.projectID + \"' established\");\n            }\n          }\n          return currentStatus = \"connected\";\n        };\n      })(this));\n      return source.addEventListener(\"error\", (function(_this) {\n        return function() {\n          if (currentStatus === \"connected\") {\n            _this._status = \"disconnected\";\n            if (callback != null) {\n              callback(\"disconnected\");\n            }\n            if (_this.debug) {\n              console.warn(\"Firebase: Connection to Firebase Project '\" + _this.projectID + \"' closed\");\n            }\n          }\n          return currentStatus = \"disconnected\";\n        };\n      })(this));\n    } else {\n      url = getCORSurl(this.server, path, this.secret, this.projectID);\n      source = new EventSource(url);\n      if (this.debug) {\n        console.log(\"Firebase: Listening to changes made to '\" + path + \"' \\n URL: '\" + url + \"'\");\n      }\n      source.addEventListener(\"put\", (function(_this) {\n        return function(ev) {\n          if (callback != null) {\n            callback(JSON.parse(ev.data).data, \"put\", JSON.parse(ev.data).patch);\n          }\n          if (_this.debug) {\n            return console.log(\"Firebase: Received changes made to '\" + path + \"' via 'PUT': \" + (JSON.parse(ev.data).data) + \" \\n URL: '\" + url + \"'\");\n          }\n        };\n      })(this));\n      return source.addEventListener(\"patch\", (function(_this) {\n        return function(ev) {\n          if (callback != null) {\n            callback(JSON.parse(ev.data).data, \"patch\", JSON.parse(ev.data).patch);\n          }\n          if (_this.debug) {\n            return console.log(\"Firebase: Received changes made to '\" + path + \"' via 'PATCH': \" + (JSON.parse(ev.data).data) + \" \\n URL: '\" + url + \"'\");\n          }\n        };\n      })(this));\n    }\n  };\n\n  return FirebaseFramer;\n\n})(Framer.BaseClass);\n\n//# sourceMappingURL=data:application/json;base64,\n","var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nexports.Input = (function(superClass) {\n  extend(Input, superClass);\n\n  Input.define(\"style\", {\n    get: function() {\n      return this.input.style;\n    },\n    set: function(value) {\n      return _.extend(this.input.style, value);\n    }\n  });\n\n  Input.define(\"value\", {\n    get: function() {\n      return this.input.value;\n    },\n    set: function(value) {\n      return this.input.value = value;\n    }\n  });\n\n  function Input(options) {\n    if (options == null) {\n      options = {};\n    }\n    if (options.setup == null) {\n      options.setup = false;\n    }\n    if (options.width == null) {\n      options.width = Screen.width;\n    }\n    if (options.clip == null) {\n      options.clip = false;\n    }\n    if (options.height == null) {\n      options.height = 60;\n    }\n    if (options.backgroundColor == null) {\n      options.backgroundColor = options.setup ? \"rgba(255, 60, 47, .5)\" : \"transparent\";\n    }\n    if (options.fontSize == null) {\n      options.fontSize = 30;\n    }\n    if (options.lineHeight == null) {\n      options.lineHeight = 30;\n    }\n    if (options.padding == null) {\n      options.padding = 10;\n    }\n    if (options.fontFamily == null) {\n      options.fontFamily = \"\";\n    }\n    if (options.opacity == null) {\n      options.opacity = 1;\n    }\n    if (options.text == null) {\n      options.text = \"\";\n    }\n    if (options.placeholder == null) {\n      options.placeholder = \"\";\n    }\n    if (options.type == null) {\n      options.type = \"text\";\n    }\n    Input.__super__.constructor.call(this, options);\n    if (options.placeholderColor != null) {\n      this.placeholderColor = options.placeholderColor;\n    }\n    this.input = document.createElement(\"input\");\n    this.input.id = \"input-\" + (_.now());\n    this.input.style.cssText = \"font-size: \" + options.fontSize + \"px; line-height: \" + options.lineHeight + \"px; padding: \" + options.padding + \"px; width: \" + options.width + \"px; height: \" + options.height + \"px; border: none; outline-width: 0; background-image: url(about:blank); background-color: \" + options.backgroundColor + \"; font-family: \" + options.fontFamily + \"; opacity: \" + options.opacity + \";\";\n    this.input.value = options.text;\n    this.input.type = options.type;\n    this.input.placeholder = options.placeholder;\n    this.form = document.createElement(\"form\");\n    this.form.appendChild(this.input);\n    this._element.appendChild(this.form);\n    this.backgroundColor = \"transparent\";\n    if (this.placeholderColor) {\n      this.updatePlaceholderColor(options.placeholderColor);\n    }\n  }\n\n  Input.prototype.updatePlaceholderColor = function(color) {\n    var css;\n    this.placeholderColor = color;\n    if (this.pageStyle != null) {\n      document.head.removeChild(this.pageStyle);\n    }\n    this.pageStyle = document.createElement(\"style\");\n    this.pageStyle.type = \"text/css\";\n    css = \"#\" + this.input.id + \"::-webkit-input-placeholder { color: \" + this.placeholderColor + \"; }\";\n    this.pageStyle.appendChild(document.createTextNode(css));\n    return document.head.appendChild(this.pageStyle);\n  };\n\n  Input.prototype.focus = function() {\n    return this.input.focus();\n  };\n\n  return Input;\n\n})(Layer);\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2plZmZyZXkuaGFycmlzL0RldmVsb3BtZW50L2ZyYW1lci1za2V0Y2gtZmlyZWJhc2UtYm9pbGVycGxhdGUvc3JjL21vZHVsZXMvaW5wdXRmaWVsZC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvamVmZnJleS5oYXJyaXMvRGV2ZWxvcG1lbnQvZnJhbWVyLXNrZXRjaC1maXJlYmFzZS1ib2lsZXJwbGF0ZS9zcmMvbW9kdWxlcy9pbnB1dGZpZWxkLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxJQUFBOzs7QUFBTSxPQUFPLENBQUM7OztFQUNiLEtBQUMsQ0FBQSxNQUFELENBQVEsT0FBUixFQUNDO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLEtBQUQ7YUFDSixDQUFDLENBQUMsTUFBRixDQUFTLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBaEIsRUFBdUIsS0FBdkI7SUFESSxDQURMO0dBREQ7O0VBS0EsS0FBQyxDQUFBLE1BQUQsQ0FBUSxPQUFSLEVBQ0M7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFBVixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsS0FBRDthQUNKLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBUCxHQUFlO0lBRFgsQ0FETDtHQUREOztFQUthLGVBQUMsT0FBRDs7TUFBQyxVQUFVOzs7TUFDdkIsT0FBTyxDQUFDLFFBQVM7OztNQUNqQixPQUFPLENBQUMsUUFBUyxNQUFNLENBQUM7OztNQUN4QixPQUFPLENBQUMsT0FBUTs7O01BQ2hCLE9BQU8sQ0FBQyxTQUFVOzs7TUFDbEIsT0FBTyxDQUFDLGtCQUFzQixPQUFPLENBQUMsS0FBWCxHQUFzQix1QkFBdEIsR0FBbUQ7OztNQUM5RSxPQUFPLENBQUMsV0FBWTs7O01BQ3BCLE9BQU8sQ0FBQyxhQUFjOzs7TUFD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\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset:utf-8;base64,"}