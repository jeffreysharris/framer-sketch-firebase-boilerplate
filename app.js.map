{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/fs-web/dist/cjs/core.js","node_modules/fs-web/dist/cjs/directory_entry.js","node_modules/fs-web/dist/cjs/fs.js","node_modules/path-browserify/index.js","node_modules/process/browser.js","src/app.coffee","src/modules/firebaseframer.coffee","src/modules/inputfield.coffee"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfhxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzxfile":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*fs-web@1.0.0#core*/\n'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.readFile = readFile;\nexports.readString = readString;\nexports.writeFile = writeFile;\nexports.removeFile = removeFile;\nexports.readdir = readdir;\nexports.mkdir = mkdir;\nexports.rmdir = rmdir;\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { 'default': obj };\n}\nvar _path = require('path');\nvar _path2 = _interopRequireDefault(_path);\nvar _directory_entry = require('./directory_entry.js');\nvar _directory_entry2 = _interopRequireDefault(_directory_entry);\nfunction ab2str(buf) {\n    return String.fromCharCode.apply(null, new Uint16Array(buf));\n}\nfunction str2ab(str) {\n    var buf = new ArrayBuffer(str.length * 2);\n    var bufView = new Uint16Array(buf);\n    for (var i = 0, strLen = str.length; i < strLen; i++) {\n        bufView[i] = str.charCodeAt(i);\n    }\n    return buf;\n}\nvar DB_NAME = window.location.host + '_filesystem', OS_NAME = 'files', DIR_IDX = 'dir';\nfunction init(callback) {\n    var req = window.indexedDB.open(DB_NAME, 1);\n    req.onupgradeneeded = function (e) {\n        var db = e.target.result;\n        var objectStore = db.createObjectStore(OS_NAME, { keyPath: 'path' });\n        objectStore.createIndex(DIR_IDX, 'dir', { unique: false });\n    };\n    req.onsuccess = function (e) {\n        callback(e.target.result);\n    };\n}\nfunction initOS(type, callback) {\n    init(function (db) {\n        var trans = db.transaction([OS_NAME], type), os = trans.objectStore(OS_NAME);\n        callback(os);\n    });\n}\nvar readFrom = function readFrom(fileName) {\n    return new Promise(function (resolve, reject) {\n        initOS('readonly', function (os) {\n            var req = os.get(fileName);\n            req.onerror = reject;\n            req.onsuccess = function (e) {\n                var res = e.target.result;\n                if (res && res.data) {\n                    resolve(res.data);\n                } else {\n                    reject('File not found');\n                }\n            };\n        });\n    });\n};\nfunction readFile(fileName) {\n    return readFrom(fileName).then(function (data) {\n        if (!(data instanceof ArrayBuffer)) {\n            data = str2ab(data.toString());\n        }\n        return data;\n    });\n}\nfunction readString(fileName) {\n    return readFrom(fileName).then(function (data) {\n        if (data instanceof ArrayBuffer) {\n            data = ab2str(data);\n        }\n        return data;\n    });\n}\n;\nfunction writeFile(fileName, data) {\n    return new Promise(function (resolve, reject) {\n        initOS('readwrite', function (os) {\n            var req = os.put({\n                'path': fileName,\n                'dir': _path2['default'].dirname(fileName),\n                'type': 'file',\n                'data': data\n            });\n            req.onerror = reject;\n            req.onsuccess = function (e) {\n                resolve();\n            };\n        });\n    });\n}\n;\nfunction removeFile(fileName) {\n    return new Promise(function (resolve) {\n        initOS('readwrite', function (os) {\n            var req = os['delete'](fileName);\n            req.onerror = req.onsuccess = function (e) {\n                resolve();\n            };\n        });\n    });\n}\n;\nfunction withTrailingSlash(path) {\n    var directoryWithTrailingSlash = path[path.length - 1] === '/' ? path : path + '/';\n    return directoryWithTrailingSlash;\n}\nfunction readdir(directoryName) {\n    return new Promise(function (resolve, reject) {\n        initOS('readonly', function (os) {\n            var dir = _path2['default'].dirname(withTrailingSlash(directoryName));\n            var idx = os.index(DIR_IDX);\n            var range = IDBKeyRange.only(dir);\n            var req = idx.openCursor(range);\n            req.onerror = function (e) {\n                reject(e);\n            };\n            var results = [];\n            req.onsuccess = function (e) {\n                var cursor = e.target.result;\n                if (cursor) {\n                    var value = cursor.value;\n                    var entry = new _directory_entry2['default'](value.path, value.type);\n                    results.push(entry);\n                    cursor['continue']();\n                } else {\n                    resolve(results);\n                }\n            };\n        });\n    });\n}\n;\nfunction mkdir(fullPath) {\n    return new Promise(function (resolve, reject) {\n        initOS('readwrite', function (os) {\n            var dir = withTrailingSlash(_path2['default']);\n            var req = os.put({\n                'path': fullPath,\n                'dir': _path2['default'].dirname(dir),\n                'type': 'directory'\n            });\n            req.onerror = reject;\n            req.onsuccess = function (e) {\n                resolve();\n            };\n        });\n    });\n}\n;\nfunction rmdir(fullPath) {\n    return readdir(fullPath).then(function removeFiles(files) {\n        if (!files || !files.length) {\n            return removeFile(fullPath);\n        }\n        var file = files.shift(), func = file.type === 'directory' ? rmdir : removeFile;\n        return func(file.name).then(function () {\n            return removeFiles(files);\n        });\n    });\n}\n;","/*fs-web@1.0.0#directory_entry*/\n'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { 'default': obj };\n}\nvar _path = require('path');\nvar _path2 = _interopRequireDefault(_path);\nfunction DirectoryEntry(fullPath, type) {\n    this.path = fullPath;\n    this.name = _path2['default'].basename(fullPath);\n    this.dir = _path2['default'].dirname(fullPath);\n    this.type = type;\n}\nexports['default'] = DirectoryEntry;\nmodule.exports = exports['default'];","/*fs-web@1.0.0#fs*/\n'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    } else {\n        var newObj = {};\n        if (obj != null) {\n            for (var key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key))\n                    newObj[key] = obj[key];\n            }\n        }\n        newObj['default'] = obj;\n        return newObj;\n    }\n}\nfunction _defaults(obj, defaults) {\n    var keys = Object.getOwnPropertyNames(defaults);\n    for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        var value = Object.getOwnPropertyDescriptor(defaults, key);\n        if (value && value.configurable && obj[key] === undefined) {\n            Object.defineProperty(obj, key, value);\n        }\n    }\n    return obj;\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { 'default': obj };\n}\nvar _core = require('./core.js');\nvar _directory_entry = require('./directory_entry.js');\nvar _directory_entry2 = _interopRequireDefault(_directory_entry);\n_directory_entry2['default'].prototype.readFile = function (callback) {\n    if (this.type !== 'file') {\n        throw new TypeError('Not a file.');\n    }\n    return (0, _core.readFile)(this.path, callback);\n};\n_defaults(exports, _interopRequireWildcard(_core));\nexports.DirectoryEntry = _directory_entry2['default'];","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var FirebaseFramer, HEIGHT, Input, WIDTH, bg, button, demoDB, field, footer, fs, lineHeight, post, stream, textfield;\n\nfs = require(\"fs-web\");\n\nFirebaseFramer = require('firebaseframer').FirebaseFramer;\n\nInput = require(\"inputfield\").Input;\n\nWIDTH = Framer.Screen.width;\n\nHEIGHT = Framer.Screen.height;\n\nlineHeight = 30;\n\nfs.readdir(\"images\", function(err, files) {\n  console.log(err);\n  return console.log(files);\n});\n\nFramer.Defaults.Animation = {\n  curve: 'spring(150, 10, 0)'\n};\n\ndemoDB = new FirebaseFramer({\n  projectID: \"framer-sketch-firebase-test\",\n  secret: \"lHwsK4ljhwUmMt3EU1ybrMPQcSDgbKhvTIwuqJ9I\",\n  server: \"s-usc1c-nss-134.firebaseio.com\"\n});\n\nbg = new BackgroundLayer({\n  backgroundColor: \"#fafafa\"\n});\n\nfooter = new Layer({\n  x: 0,\n  y: Canvas.height - 230,\n  width: Canvas.width,\n  height: 230,\n  backgroundColor: \"#999\"\n});\n\nstream = new Layer({\n  x: 0,\n  y: 0,\n  width: Canvas.width,\n  height: Canvas.height - 230,\n  backgroundColor: \"transparent\"\n});\n\nbutton = new Layer({\n  x: 620,\n  y: Canvas.height - 200,\n  width: 50,\n  height: 50,\n  image: \"images/button.png\"\n});\n\nbutton.onMouseDown(function() {\n  return button.image = \"images/button-down.png\";\n});\n\nfield = new Layer({\n  x: 100,\n  y: Canvas.height - 200,\n  width: 520,\n  height: 50,\n  image: \"images/field.png\"\n});\n\ntextfield = new Input({\n  setup: false,\n  type: \"text\",\n  x: 100,\n  y: Canvas.height - 200,\n  width: 500,\n  height: 30\n});\n\ntextfield.style = {\n  fontSize: \"14px\",\n  color: \"#333\",\n  fontFamily: \"Helvetica\",\n  padding: \"10px 10px 10px 20px\"\n};\n\npost = function() {\n  if (textfield.value.length) {\n    return demoDB.post('/messages', {\n      \"text\": textfield.value\n    });\n  }\n};\n\ndemoDB.onChange(\"/messages\", function(message) {\n  var child, h, i, j, k, len, line, m, messageArray, ref, ref1, results, t;\n  ref = stream.children;\n  for (j = 0, len = ref.length; j < len; j++) {\n    child = ref[j];\n    child.animate({\n      y: child.y - lineHeight\n    });\n  }\n  messageArray = _.toArray(message);\n  i = 1;\n  h = lineHeight;\n  results = [];\n  for (k = messageArray.length - 1; k >= 0; k += -1) {\n    m = messageArray[k];\n    t = (ref1 = m.text) != null ? ref1 : m;\n    line = new TextLayer({\n      x: 120,\n      textAlign: \"left\",\n      y: Canvas.height - 250 - h * i,\n      text: t,\n      color: \"#333\",\n      font: \"14px/1.5 Helvetica\"\n    });\n    line.parent = stream;\n    results.push(i++);\n  }\n  return results;\n});\n\nbutton.onMouseUp(function() {\n  button.image = \"images/button.png\";\n  return post();\n});\n\ndocument.addEventListener('keypress', function(event) {\n  if (event.keyCode === 13) {\n    event.preventDefault();\n    post();\n    return textfield.value = \"\";\n  }\n});\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2plZmZyZXkuaGFycmlzL0RldmVsb3BtZW50L2ZyYW1lci1za2V0Y2gtZmlyZWJhc2UtYm9pbGVycGxhdGUvc3JjL2FwcC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvamVmZnJleS5oYXJyaXMvRGV2ZWxvcG1lbnQvZnJhbWVyLXNrZXRjaC1maXJlYmFzZS1ib2lsZXJwbGF0ZS9zcmMvYXBwLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBOztBQUFBLEVBQUEsR0FBSyxPQUFBLENBQVEsUUFBUjs7QUFDSixpQkFBa0IsT0FBQSxDQUFRLGdCQUFSOztBQUNsQixRQUFTLE9BQUEsQ0FBUSxZQUFSOztBQUVWLEtBQUEsR0FBUSxNQUFNLENBQUMsTUFBTSxDQUFDOztBQUN0QixNQUFBLEdBQVMsTUFBTSxDQUFDLE1BQU0sQ0FBQzs7QUFFdkIsVUFBQSxHQUFhOztBQUViLEVBQUUsQ0FBQyxPQUFILENBQVcsUUFBWCxFQUFxQixTQUFDLEdBQUQsRUFBTSxLQUFOO0VBQ2pCLE9BQU8sQ0FBQyxHQUFSLENBQVksR0FBWjtTQUNBLE9BQU8sQ0FBQyxHQUFSLENBQVksS0FBWjtBQUZpQixDQUFyQjs7QUFJQSxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQWhCLEdBQ0U7RUFBQSxLQUFBLEVBQU8sb0JBQVA7OztBQUVGLE1BQUEsR0FBUyxJQUFJLGNBQUosQ0FDUjtFQUFBLFNBQUEsRUFBVyw2QkFBWDtFQUNBLE1BQUEsRUFBUSwwQ0FEUjtFQUVBLE1BQUEsRUFBUSxnQ0FGUjtDQURROztBQUtULEVBQUEsR0FBSyxJQUFJLGVBQUosQ0FDRDtFQUFBLGVBQUEsRUFBaUIsU0FBakI7Q0FEQzs7QUFHTCxNQUFBLEdBQVMsSUFBSSxLQUFKLENBQ0w7RUFBQSxDQUFBLEVBQUksQ0FBSjtFQUNBLENBQUEsRUFBSSxNQUFNLENBQUMsTUFBUCxHQUFnQixHQURwQjtFQUVBLEtBQUEsRUFBTyxNQUFNLENBQUMsS0FGZDtFQUdBLE1BQUEsRUFBUSxHQUhSO0VBSUEsZUFBQSxFQUFpQixNQUpqQjtDQURLOztBQU9ULE1BQUEsR0FBUyxJQUFJLEtBQUosQ0FDTDtFQUFBLENBQUEsRUFBRyxDQUFIO0VBQ0EsQ0FBQSxFQUFHLENBREg7RUFFQSxLQUFBLEVBQU8sTUFBTSxDQUFDLEtBRmQ7RUFHQSxNQUFBLEVBQVEsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsR0FIeEI7RUFJQSxlQUFBLEVBQWlCLGFBSmpCO0NBREs7O0FBU1QsTUFBQSxHQUFTLElBQUksS0FBSixDQUNMO0VBQUEsQ0FBQSxFQUFHLEdBQUg7RUFDQSxDQUFBLEVBQUcsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsR0FEbkI7RUFFQSxLQUFBLEVBQU8sRUFGUDtFQUdBLE1BQUEsRUFBUSxFQUhSO0VBSUEsS0FBQSxFQUFPLG1CQUpQO0NBREs7O0FBT1QsTUFBTSxDQUFDLFdBQVAsQ0FBbUIsU0FBQTtTQUNmLE1BQU0sQ0FBQyxLQUFQLEdBQWU7QUFEQSxDQUFuQjs7QUFHQSxLQUFBLEdBQVEsSUFBSSxLQUFKLENBQ0o7RUFBQSxDQUFBLEVBQUcsR0FBSDtFQUNBLENBQUEsRUFBRyxNQUFNLENBQUMsTUFBUCxHQUFnQixHQURuQjtFQUVBLEtBQUEsRUFBTyxHQUZQO0VBR0EsTUFBQSxFQUFRLEVBSFI7RUFJQSxLQUFBLEVBQU8sa0JBSlA7Q0FESTs7QUFPUixTQUFBLEdBQVksSUFBSSxLQUFKLENBQ1I7RUFBQSxLQUFBLEVBQU8sS0FBUDtFQUNBLElBQUEsRUFBTSxNQUROO0VBRUEsQ0FBQSxFQUFHLEdBRkg7RUFHQSxDQUFBLEVBQUcsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsR0FIbkI7RUFJQSxLQUFBLEVBQU8sR0FKUDtFQUtBLE1BQUEsRUFBUSxFQUxSO0NBRFE7O0FBUVosU0FBUyxDQUFDLEtBQVYsR0FDSTtFQUFBLFFBQUEsRUFBVSxNQUFWO0VBQ0EsS0FBQSxFQUFPLE1BRFA7RUFFQSxVQUFBLEVBQVksV0FGWjtFQUdBLE9BQUEsRUFBUyxxQkFIVDs7O0FBT0osSUFBQSxHQUFPLFNBQUE7RUFDSCxJQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBbkI7V0FDSSxNQUFNLENBQUMsSUFBUCxDQUFZLFdBQVosRUFBeUI7TUFBQyxNQUFBLEVBQVEsU0FBUyxDQUFDLEtBQW5CO0tBQXpCLEVBREo7O0FBREc7O0FBZ0JQLE1BQU0sQ0FBQyxRQUFQLENBQWdCLFdBQWhCLEVBQTZCLFNBQUMsT0FBRDtBQUN6QixNQUFBO0FBQUE7QUFBQSxPQUFBLHFDQUFBOztJQUNJLEtBQUssQ0FBQyxPQUFOLENBQ0k7TUFBQSxDQUFBLEVBQUcsS0FBSyxDQUFDLENBQU4sR0FBVSxVQUFiO0tBREo7QUFESjtFQUdBLFlBQUEsR0FBZSxDQUFDLENBQUMsT0FBRixDQUFVLE9BQVY7RUFFZixDQUFBLEdBQUk7RUFDSixDQUFBLEdBQUk7QUFFSjtPQUFBLDRDQUFBOztJQUNJLENBQUEsb0NBQWE7SUFDYixJQUFBLEdBQU8sSUFBSSxTQUFKLENBQ0g7TUFBQSxDQUFBLEVBQUcsR0FBSDtNQUNBLFNBQUEsRUFBVyxNQURYO01BRUEsQ0FBQSxFQUFHLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLEdBQWhCLEdBQXNCLENBQUEsR0FBSSxDQUY3QjtNQUdBLElBQUEsRUFBTSxDQUhOO01BSUEsS0FBQSxFQUFPLE1BSlA7TUFLQSxJQUFBLEVBQU0sb0JBTE47S0FERztJQU9QLElBQUksQ0FBQyxNQUFMLEdBQWM7aUJBQ2QsQ0FBQTtBQVZKOztBQVR5QixDQUE3Qjs7QUFxQkEsTUFBTSxDQUFDLFNBQVAsQ0FBaUIsU0FBQTtFQUNiLE1BQU0sQ0FBQyxLQUFQLEdBQWU7U0FDZixJQUFBLENBQUE7QUFGYSxDQUFqQjs7QUFJQSxRQUFRLENBQUMsZ0JBQVQsQ0FBMEIsVUFBMUIsRUFBc0MsU0FBQyxLQUFEO0VBQ2xDLElBQUcsS0FBSyxDQUFDLE9BQU4sS0FBaUIsRUFBcEI7SUFDSSxLQUFLLENBQUMsY0FBTixDQUFBO0lBQ0EsSUFBQSxDQUFBO1dBQ0EsU0FBUyxDQUFDLEtBQVYsR0FBa0IsR0FIdEI7O0FBRGtDLENBQXRDIn0=\n","var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nexports.FirebaseFramer = (function(superClass) {\n  var getCORSurl, request;\n\n  extend(FirebaseFramer, superClass);\n\n  getCORSurl = function(server, path, secret, project) {\n    var url;\n    switch (Utils.isWebKit()) {\n      case true:\n        url = \"https://\" + server + path + \".json?auth=\" + secret + \"&ns=\" + project + \"&sse=true\";\n        break;\n      default:\n        url = \"https://\" + project + \".firebaseio.com\" + path + \".json?auth=\" + secret;\n    }\n    return url;\n  };\n\n  FirebaseFramer.define(\"status\", {\n    get: function() {\n      return this._status;\n    }\n  });\n\n  function FirebaseFramer(options) {\n    var base, base1, base2, base3;\n    this.options = options != null ? options : {};\n    this.projectID = (base = this.options).projectID != null ? base.projectID : base.projectID = null;\n    this.secret = (base1 = this.options).secret != null ? base1.secret : base1.secret = null;\n    this.server = (base2 = this.options).server != null ? base2.server : base2.server = void 0;\n    this.debug = (base3 = this.options).debug != null ? base3.debug : base3.debug = false;\n    if (this._status == null) {\n      this._status = \"disconnected\";\n    }\n    FirebaseFramer.__super__.constructor.apply(this, arguments);\n    if (this.server === void 0) {\n      Utils.domLoadJSON(\"https://\" + this.projectID + \".firebaseio.com/.settings/owner.json\", function(a, server) {\n        var msg;\n        print(msg = \"Add ______ server:\" + '   \"' + server + '\"' + \" _____ to your instance of Firebase.\");\n        if (this.debug) {\n          return console.log(\"Firebase: \" + msg);\n        }\n      });\n    }\n    if (this.debug) {\n      console.log(\"Firebase: Connecting to Firebase Project '\" + this.projectID + \"' ... \\n URL: '\" + (getCORSurl(this.server, \"/\", this.secret, this.projectID)) + \"'\");\n    }\n    this.onChange(\"connection\");\n  }\n\n  request = function(project, secret, path, callback, method, data, parameters, debug) {\n    var url, xhttp;\n    url = \"https://\" + project + \".firebaseio.com\" + path + \".json?auth=\" + secret;\n    if (parameters !== void 0) {\n      if (parameters.shallow) {\n        url += \"&shallow=true\";\n      }\n      if (parameters.format === \"export\") {\n        url += \"&format=export\";\n      }\n      switch (parameters.print) {\n        case \"pretty\":\n          url += \"&print=pretty\";\n          break;\n        case \"silent\":\n          url += \"&print=silent\";\n      }\n      if (typeof parameters.download === \"string\") {\n        url += \"&download=\" + parameters.download;\n        window.open(url, \"_self\");\n      }\n      if (typeof parameters.orderBy === \"string\") {\n        url += \"&orderBy=\" + '\"' + parameters.orderBy + '\"';\n      }\n      if (typeof parameters.limitToFirst === \"number\") {\n        url += \"&limitToFirst=\" + parameters.limitToFirst;\n      }\n      if (typeof parameters.limitToLast === \"number\") {\n        url += \"&limitToLast=\" + parameters.limitToLast;\n      }\n      if (typeof parameters.startAt === \"number\") {\n        url += \"&startAt=\" + parameters.startAt;\n      }\n      if (typeof parameters.endAt === \"number\") {\n        url += \"&endAt=\" + parameters.endAt;\n      }\n      if (typeof parameters.equalTo === \"number\") {\n        url += \"&equalTo=\" + parameters.equalTo;\n      }\n    }\n    xhttp = new XMLHttpRequest;\n    if (debug) {\n      console.log(\"Firebase: New '\" + method + \"'-request with data: '\" + (JSON.stringify(data)) + \"' \\n URL: '\" + url + \"'\");\n    }\n    xhttp.onreadystatechange = (function(_this) {\n      return function() {\n        if (parameters !== void 0) {\n          if (parameters.print === \"silent\" || typeof parameters.download === \"string\") {\n            return;\n          }\n        }\n        switch (xhttp.readyState) {\n          case 0:\n            if (debug) {\n              console.log(\"Firebase: Request not initialized \\n URL: '\" + url + \"'\");\n            }\n            break;\n          case 1:\n            if (debug) {\n              console.log(\"Firebase: Server connection established \\n URL: '\" + url + \"'\");\n            }\n            break;\n          case 2:\n            if (debug) {\n              console.log(\"Firebase: Request received \\n URL: '\" + url + \"'\");\n            }\n            break;\n          case 3:\n            if (debug) {\n              console.log(\"Firebase: Processing request \\n URL: '\" + url + \"'\");\n            }\n            break;\n          case 4:\n            if (callback != null) {\n              callback(JSON.parse(xhttp.responseText));\n            }\n            if (debug) {\n              console.log(\"Firebase: Request finished, response: '\" + (JSON.parse(xhttp.responseText)) + \"' \\n URL: '\" + url + \"'\");\n            }\n        }\n        if (xhttp.status === \"404\") {\n          if (debug) {\n            return console.warn(\"Firebase: Invalid request, page not found \\n URL: '\" + url + \"'\");\n          }\n        }\n      };\n    })(this);\n    xhttp.open(method, url, true);\n    xhttp.setRequestHeader(\"Content-type\", \"application/json; charset=utf-8\");\n    return xhttp.send(data = \"\" + (JSON.stringify(data)));\n  };\n\n  FirebaseFramer.prototype.get = function(path, callback, parameters) {\n    return request(this.projectID, this.secret, path, callback, \"GET\", null, parameters, this.debug);\n  };\n\n  FirebaseFramer.prototype.put = function(path, data, callback, parameters) {\n    return request(this.projectID, this.secret, path, callback, \"PUT\", data, parameters, this.debug);\n  };\n\n  FirebaseFramer.prototype.post = function(path, data, callback, parameters) {\n    return request(this.projectID, this.secret, path, callback, \"POST\", data, parameters, this.debug);\n  };\n\n  FirebaseFramer.prototype.patch = function(path, data, callback, parameters) {\n    return request(this.projectID, this.secret, path, callback, \"PATCH\", data, parameters, this.debug);\n  };\n\n  FirebaseFramer.prototype[\"delete\"] = function(path, callback, parameters) {\n    return request(this.projectID, this.secret, path, callback, \"DELETE\", null, parameters, this.debug);\n  };\n\n  FirebaseFramer.prototype.onChange = function(path, callback) {\n    var currentStatus, source, url;\n    if (path === \"connection\") {\n      url = getCORSurl(this.server, \"/\", this.secret, this.projectID);\n      currentStatus = \"disconnected\";\n      source = new EventSource(url);\n      source.addEventListener(\"open\", (function(_this) {\n        return function() {\n          if (currentStatus === \"disconnected\") {\n            _this._status = \"connected\";\n            if (callback != null) {\n              callback(\"connected\");\n            }\n            if (_this.debug) {\n              console.log(\"Firebase: Connection to Firebase Project '\" + _this.projectID + \"' established\");\n            }\n          }\n          return currentStatus = \"connected\";\n        };\n      })(this));\n      return source.addEventListener(\"error\", (function(_this) {\n        return function() {\n          if (currentStatus === \"connected\") {\n            _this._status = \"disconnected\";\n            if (callback != null) {\n              callback(\"disconnected\");\n            }\n            if (_this.debug) {\n              console.warn(\"Firebase: Connection to Firebase Project '\" + _this.projectID + \"' closed\");\n            }\n          }\n          return currentStatus = \"disconnected\";\n        };\n      })(this));\n    } else {\n      url = getCORSurl(this.server, path, this.secret, this.projectID);\n      source = new EventSource(url);\n      if (this.debug) {\n        console.log(\"Firebase: Listening to changes made to '\" + path + \"' \\n URL: '\" + url + \"'\");\n      }\n      source.addEventListener(\"put\", (function(_this) {\n        return function(ev) {\n          if (callback != null) {\n            callback(JSON.parse(ev.data).data, \"put\", JSON.parse(ev.data).patch);\n          }\n          if (_this.debug) {\n            return console.log(\"Firebase: Received changes made to '\" + path + \"' via 'PUT': \" + (JSON.parse(ev.data).data) + \" \\n URL: '\" + url + \"'\");\n          }\n        };\n      })(this));\n      return source.addEventListener(\"patch\", (function(_this) {\n        return function(ev) {\n          if (callback != null) {\n            callback(JSON.parse(ev.data).data, \"patch\", JSON.parse(ev.data).patch);\n          }\n          if (_this.debug) {\n            return console.log(\"Firebase: Received changes made to '\" + path + \"' via 'PATCH': \" + (JSON.parse(ev.data).data) + \" \\n URL: '\" + url + \"'\");\n          }\n        };\n      })(this));\n    }\n  };\n\n  return FirebaseFramer;\n\n})(Framer.BaseClass);\n\n//# sourceMappingURL=data:application/json;base64,\n","var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nexports.Input = (function(superClass) {\n  extend(Input, superClass);\n\n  Input.define(\"style\", {\n    get: function() {\n      return this.input.style;\n    },\n    set: function(value) {\n      return _.extend(this.input.style, value);\n    }\n  });\n\n  Input.define(\"value\", {\n    get: function() {\n      return this.input.value;\n    },\n    set: function(value) {\n      return this.input.value = value;\n    }\n  });\n\n  function Input(options) {\n    if (options == null) {\n      options = {};\n    }\n    if (options.setup == null) {\n      options.setup = false;\n    }\n    if (options.width == null) {\n      options.width = Screen.width;\n    }\n    if (options.clip == null) {\n      options.clip = false;\n    }\n    if (options.height == null) {\n      options.height = 60;\n    }\n    if (options.backgroundColor == null) {\n      options.backgroundColor = options.setup ? \"rgba(255, 60, 47, .5)\" : \"transparent\";\n    }\n    if (options.fontSize == null) {\n      options.fontSize = 30;\n    }\n    if (options.lineHeight == null) {\n      options.lineHeight = 30;\n    }\n    if (options.padding == null) {\n      options.padding = 10;\n    }\n    if (options.fontFamily == null) {\n      options.fontFamily = \"\";\n    }\n    if (options.opacity == null) {\n      options.opacity = 1;\n    }\n    if (options.text == null) {\n      options.text = \"\";\n    }\n    if (options.placeholder == null) {\n      options.placeholder = \"\";\n    }\n    if (options.type == null) {\n      options.type = \"text\";\n    }\n    Input.__super__.constructor.call(this, options);\n    if (options.placeholderColor != null) {\n      this.placeholderColor = options.placeholderColor;\n    }\n    this.input = document.createElement(\"input\");\n    this.input.id = \"input-\" + (_.now());\n    this.input.style.cssText = \"font-size: \" + options.fontSize + \"px; line-height: \" + options.lineHeight + \"px; padding: \" + options.padding + \"px; width: \" + options.width + \"px; height: \" + options.height + \"px; border: none; outline-width: 0; background-image: url(about:blank); background-color: \" + options.backgroundColor + \"; font-family: \" + options.fontFamily + \"; opacity: \" + options.opacity + \";\";\n    this.input.value = options.text;\n    this.input.type = options.type;\n    this.input.placeholder = options.placeholder;\n    this.form = document.createElement(\"form\");\n    this.form.appendChild(this.input);\n    this._element.appendChild(this.form);\n    this.backgroundColor = \"transparent\";\n    if (this.placeholderColor) {\n      this.updatePlaceholderColor(options.placeholderColor);\n    }\n  }\n\n  Input.prototype.updatePlaceholderColor = function(color) {\n    var css;\n    this.placeholderColor = color;\n    if (this.pageStyle != null) {\n      document.head.removeChild(this.pageStyle);\n    }\n    this.pageStyle = document.createElement(\"style\");\n    this.pageStyle.type = \"text/css\";\n    css = \"#\" + this.input.id + \"::-webkit-input-placeholder { color: \" + this.placeholderColor + \"; }\";\n    this.pageStyle.appendChild(document.createTextNode(css));\n    return document.head.appendChild(this.pageStyle);\n  };\n\n  Input.prototype.focus = function() {\n    return this.input.focus();\n  };\n\n  return Input;\n\n})(Layer);\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2plZmZyZXkuaGFycmlzL0RldmVsb3BtZW50L2ZyYW1lci1za2V0Y2gtZmlyZWJhc2UtYm9pbGVycGxhdGUvc3JjL21vZHVsZXMvaW5wdXRmaWVsZC5jb2ZmZWUiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvamVmZnJleS5oYXJyaXMvRGV2ZWxvcG1lbnQvZnJhbWVyLXNrZXRjaC1maXJlYmFzZS1ib2lsZXJwbGF0ZS9zcmMvbW9kdWxlcy9pbnB1dGZpZWxkLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxJQUFBOzs7QUFBTSxPQUFPLENBQUM7OztFQUNiLEtBQUMsQ0FBQSxNQUFELENBQVEsT0FBUixFQUNDO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLEtBQUQ7YUFDSixDQUFDLENBQUMsTUFBRixDQUFTLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBaEIsRUFBdUIsS0FBdkI7SUFESSxDQURMO0dBREQ7O0VBS0EsS0FBQyxDQUFBLE1BQUQsQ0FBUSxPQUFSLEVBQ0M7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFBVixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsS0FBRDthQUNKLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBUCxHQUFlO0lBRFgsQ0FETDtHQUREOztFQUthLGVBQUMsT0FBRDs7TUFBQyxVQUFVOzs7TUFDdkIsT0FBTyxDQUFDLFFBQVM7OztNQUNqQixPQUFPLENBQUMsUUFBUyxNQUFNLENBQUM7OztNQUN4QixPQUFPLENBQUMsT0FBUTs7O01BQ2hCLE9BQU8sQ0FBQyxTQUFVOzs7TUFDbEIsT0FBTyxDQUFDLGtCQUFzQixPQUFPLENBQUMsS0FBWCxHQUFzQix1QkFBdEIsR0FBbUQ7OztNQUM5RSxPQUFPLENBQUMsV0FBWTs7O01BQ3BCLE9BQU8sQ0FBQyxhQUFjOzs7TUFDdEIsT0FBTyxDQUFDLFVBQVc7OztNQUNuQixPQUFPLENBQUMsYUFBYzs7O01BQ3RCLE9BQU8sQ0FBQyxVQUFXOzs7TUFDbkIsT0FBTyxDQUFDLE9BQVE7OztNQUNoQixPQUFPLENBQUMsY0FBZTs7O01BQ3ZCLE9BQU8sQ0FBQyxPQUFROztJQUVoQix1Q0FBTSxPQUFOO0lBRUEsSUFBZ0QsZ0NBQWhEO01BQUEsSUFBQyxDQUFBLGdCQUFELEdBQW9CLE9BQU8sQ0FBQyxpQkFBNUI7O0lBQ0EsSUFBQyxDQUFBLEtBQUQsR0FBUyxRQUFRLENBQUMsYUFBVCxDQUF1QixPQUF2QjtJQUNULElBQUMsQ0FBQSxLQUFLLENBQUMsRUFBUCxHQUFZLFFBQUEsR0FBUSxDQUFDLENBQUMsQ0FBQyxHQUFGLENBQUEsQ0FBRDtJQUNwQixJQUFDLENBQUEsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFiLEdBQXVCLGFBQUEsR0FBYyxPQUFPLENBQUMsUUFBdEIsR0FBK0IsbUJBQS9CLEdBQWtELE9BQU8sQ0FBQyxVQUExRCxHQUFxRSxlQUFyRSxHQUFvRixPQUFPLENBQUMsT0FBNUYsR0FBb0csYUFBcEcsR0FBaUgsT0FBTyxDQUFDLEtBQXpILEdBQStILGNBQS9ILEdBQTZJLE9BQU8sQ0FBQyxNQUFySixHQUE0Siw0RkFBNUosR0FBd1AsT0FBTyxDQUFDLGVBQWhRLEdBQWdSLGlCQUFoUixHQUFpUyxPQUFPLENBQUMsVUFBelMsR0FBb1QsYUFBcFQsR0FBaVUsT0FBTyxDQUFDLE9BQXpVLEdBQWlWO0lBQ3hXLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBUCxHQUFlLE9BQU8sQ0FBQztJQUN2QixJQUFDLENBQUEsS0FBSyxDQUFDLElBQVAsR0FBYyxPQUFPLENBQUM7SUFDdEIsSUFBQyxDQUFBLEtBQUssQ0FBQyxXQUFQLEdBQXFCLE9BQU8sQ0FBQztJQUM3QixJQUFDLENBQUEsSUFBRCxHQUFRLFFBQVEsQ0FBQyxhQUFULENBQXVCLE1BQXZCO0lBRVIsSUFBQyxDQUFBLElBQUksQ0FBQyxXQUFOLENBQWtCLElBQUMsQ0FBQSxLQUFuQjtJQUNBLElBQUMsQ0FBQSxRQUFRLENBQUMsV0FBVixDQUFzQixJQUFDLENBQUEsSUFBdkI7SUFFQSxJQUFDLENBQUEsZUFBRCxHQUFtQjtJQUNuQixJQUFvRCxJQUFDLENBQUEsZ0JBQXJEO01BQUEsSUFBQyxDQUFBLHNCQUFELENBQXdCLE9BQU8sQ0FBQyxnQkFBaEMsRUFBQTs7RUE5Qlk7O2tCQWdDYixzQkFBQSxHQUF3QixTQUFDLEtBQUQ7QUFDdkIsUUFBQTtJQUFBLElBQUMsQ0FBQSxnQkFBRCxHQUFvQjtJQUNwQixJQUFHLHNCQUFIO01BQ0MsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFkLENBQTBCLElBQUMsQ0FBQSxTQUEzQixFQUREOztJQUVBLElBQUMsQ0FBQSxTQUFELEdBQWEsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsT0FBdkI7SUFDYixJQUFDLENBQUEsU0FBUyxDQUFDLElBQVgsR0FBa0I7SUFDbEIsR0FBQSxHQUFNLEdBQUEsR0FBSSxJQUFDLENBQUEsS0FBSyxDQUFDLEVBQVgsR0FBYyx1Q0FBZCxHQUFxRCxJQUFDLENBQUEsZ0JBQXRELEdBQXVFO0lBQzdFLElBQUMsQ0FBQSxTQUFTLENBQUMsV0FBWCxDQUF1QixRQUFRLENBQUMsY0FBVCxDQUF3QixHQUF4QixDQUF2QjtXQUNBLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBZCxDQUEwQixJQUFDLENBQUEsU0FBM0I7RUFSdUI7O2tCQVV4QixLQUFBLEdBQU8sU0FBQTtXQUNOLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBUCxDQUFBO0VBRE07Ozs7R0FyRG9CIn0=\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvZnMtd2ViL2Rpc3QvY2pzL2NvcmUuanMiLCJub2RlX21vZHVsZXMvZnMtd2ViL2Rpc3QvY2pzL2RpcmVjdG9yeV9lbnRyeS5qcyIsIm5vZGVfbW9kdWxlcy9mcy13ZWIvZGlzdC9janMvZnMuanMiLCJub2RlX21vZHVsZXMvcGF0aC1icm93c2VyaWZ5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsInNyYy9hcHAuY29mZmVlIiwic3JjL21vZHVsZXMvZmlyZWJhc2VmcmFtZXIuY29mZmVlIiwic3JjL21vZHVsZXMvaW5wdXRmaWVsZC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNoT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDeklBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN4T0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLypmcy13ZWJAMS4wLjAjY29yZSovXG4ndXNlIHN0cmljdCc7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWFkRmlsZSA9IHJlYWRGaWxlO1xuZXhwb3J0cy5yZWFkU3RyaW5nID0gcmVhZFN0cmluZztcbmV4cG9ydHMud3JpdGVGaWxlID0gd3JpdGVGaWxlO1xuZXhwb3J0cy5yZW1vdmVGaWxlID0gcmVtb3ZlRmlsZTtcbmV4cG9ydHMucmVhZGRpciA9IHJlYWRkaXI7XG5leHBvcnRzLm1rZGlyID0gbWtkaXI7XG5leHBvcnRzLnJtZGlyID0gcm1kaXI7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07XG59XG52YXIgX3BhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgX3BhdGgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGF0aCk7XG52YXIgX2RpcmVjdG9yeV9lbnRyeSA9IHJlcXVpcmUoJy4vZGlyZWN0b3J5X2VudHJ5LmpzJyk7XG52YXIgX2RpcmVjdG9yeV9lbnRyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXJlY3RvcnlfZW50cnkpO1xuZnVuY3Rpb24gYWIyc3RyKGJ1Zikge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50MTZBcnJheShidWYpKTtcbn1cbmZ1bmN0aW9uIHN0cjJhYihzdHIpIHtcbiAgICB2YXIgYnVmID0gbmV3IEFycmF5QnVmZmVyKHN0ci5sZW5ndGggKiAyKTtcbiAgICB2YXIgYnVmVmlldyA9IG5ldyBVaW50MTZBcnJheShidWYpO1xuICAgIGZvciAodmFyIGkgPSAwLCBzdHJMZW4gPSBzdHIubGVuZ3RoOyBpIDwgc3RyTGVuOyBpKyspIHtcbiAgICAgICAgYnVmVmlld1tpXSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgICByZXR1cm4gYnVmO1xufVxudmFyIERCX05BTUUgPSB3aW5kb3cubG9jYXRpb24uaG9zdCArICdfZmlsZXN5c3RlbScsIE9TX05BTUUgPSAnZmlsZXMnLCBESVJfSURYID0gJ2Rpcic7XG5mdW5jdGlvbiBpbml0KGNhbGxiYWNrKSB7XG4gICAgdmFyIHJlcSA9IHdpbmRvdy5pbmRleGVkREIub3BlbihEQl9OQU1FLCAxKTtcbiAgICByZXEub251cGdyYWRlbmVlZGVkID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIGRiID0gZS50YXJnZXQucmVzdWx0O1xuICAgICAgICB2YXIgb2JqZWN0U3RvcmUgPSBkYi5jcmVhdGVPYmplY3RTdG9yZShPU19OQU1FLCB7IGtleVBhdGg6ICdwYXRoJyB9KTtcbiAgICAgICAgb2JqZWN0U3RvcmUuY3JlYXRlSW5kZXgoRElSX0lEWCwgJ2RpcicsIHsgdW5pcXVlOiBmYWxzZSB9KTtcbiAgICB9O1xuICAgIHJlcS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBjYWxsYmFjayhlLnRhcmdldC5yZXN1bHQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBpbml0T1ModHlwZSwgY2FsbGJhY2spIHtcbiAgICBpbml0KGZ1bmN0aW9uIChkYikge1xuICAgICAgICB2YXIgdHJhbnMgPSBkYi50cmFuc2FjdGlvbihbT1NfTkFNRV0sIHR5cGUpLCBvcyA9IHRyYW5zLm9iamVjdFN0b3JlKE9TX05BTUUpO1xuICAgICAgICBjYWxsYmFjayhvcyk7XG4gICAgfSk7XG59XG52YXIgcmVhZEZyb20gPSBmdW5jdGlvbiByZWFkRnJvbShmaWxlTmFtZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGluaXRPUygncmVhZG9ubHknLCBmdW5jdGlvbiAob3MpIHtcbiAgICAgICAgICAgIHZhciByZXEgPSBvcy5nZXQoZmlsZU5hbWUpO1xuICAgICAgICAgICAgcmVxLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgICAgICByZXEub25zdWNjZXNzID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gZS50YXJnZXQucmVzdWx0O1xuICAgICAgICAgICAgICAgIGlmIChyZXMgJiYgcmVzLmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXMuZGF0YSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCdGaWxlIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcbmZ1bmN0aW9uIHJlYWRGaWxlKGZpbGVOYW1lKSB7XG4gICAgcmV0dXJuIHJlYWRGcm9tKGZpbGVOYW1lKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmICghKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgICAgIGRhdGEgPSBzdHIyYWIoZGF0YS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHJlYWRTdHJpbmcoZmlsZU5hbWUpIHtcbiAgICByZXR1cm4gcmVhZEZyb20oZmlsZU5hbWUpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICAgICAgZGF0YSA9IGFiMnN0cihkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9KTtcbn1cbjtcbmZ1bmN0aW9uIHdyaXRlRmlsZShmaWxlTmFtZSwgZGF0YSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGluaXRPUygncmVhZHdyaXRlJywgZnVuY3Rpb24gKG9zKSB7XG4gICAgICAgICAgICB2YXIgcmVxID0gb3MucHV0KHtcbiAgICAgICAgICAgICAgICAncGF0aCc6IGZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICdkaXInOiBfcGF0aDJbJ2RlZmF1bHQnXS5kaXJuYW1lKGZpbGVOYW1lKSxcbiAgICAgICAgICAgICAgICAndHlwZSc6ICdmaWxlJyxcbiAgICAgICAgICAgICAgICAnZGF0YSc6IGRhdGFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVxLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgICAgICByZXEub25zdWNjZXNzID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbjtcbmZ1bmN0aW9uIHJlbW92ZUZpbGUoZmlsZU5hbWUpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgaW5pdE9TKCdyZWFkd3JpdGUnLCBmdW5jdGlvbiAob3MpIHtcbiAgICAgICAgICAgIHZhciByZXEgPSBvc1snZGVsZXRlJ10oZmlsZU5hbWUpO1xuICAgICAgICAgICAgcmVxLm9uZXJyb3IgPSByZXEub25zdWNjZXNzID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbjtcbmZ1bmN0aW9uIHdpdGhUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgICB2YXIgZGlyZWN0b3J5V2l0aFRyYWlsaW5nU2xhc2ggPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV0gPT09ICcvJyA/IHBhdGggOiBwYXRoICsgJy8nO1xuICAgIHJldHVybiBkaXJlY3RvcnlXaXRoVHJhaWxpbmdTbGFzaDtcbn1cbmZ1bmN0aW9uIHJlYWRkaXIoZGlyZWN0b3J5TmFtZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGluaXRPUygncmVhZG9ubHknLCBmdW5jdGlvbiAob3MpIHtcbiAgICAgICAgICAgIHZhciBkaXIgPSBfcGF0aDJbJ2RlZmF1bHQnXS5kaXJuYW1lKHdpdGhUcmFpbGluZ1NsYXNoKGRpcmVjdG9yeU5hbWUpKTtcbiAgICAgICAgICAgIHZhciBpZHggPSBvcy5pbmRleChESVJfSURYKTtcbiAgICAgICAgICAgIHZhciByYW5nZSA9IElEQktleVJhbmdlLm9ubHkoZGlyKTtcbiAgICAgICAgICAgIHZhciByZXEgPSBpZHgub3BlbkN1cnNvcihyYW5nZSk7XG4gICAgICAgICAgICByZXEub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICAgICAgICByZXEub25zdWNjZXNzID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3Vyc29yID0gZS50YXJnZXQucmVzdWx0O1xuICAgICAgICAgICAgICAgIGlmIChjdXJzb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gY3Vyc29yLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSBuZXcgX2RpcmVjdG9yeV9lbnRyeTJbJ2RlZmF1bHQnXSh2YWx1ZS5wYXRoLCB2YWx1ZS50eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yWydjb250aW51ZSddKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbjtcbmZ1bmN0aW9uIG1rZGlyKGZ1bGxQYXRoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgaW5pdE9TKCdyZWFkd3JpdGUnLCBmdW5jdGlvbiAob3MpIHtcbiAgICAgICAgICAgIHZhciBkaXIgPSB3aXRoVHJhaWxpbmdTbGFzaChfcGF0aDJbJ2RlZmF1bHQnXSk7XG4gICAgICAgICAgICB2YXIgcmVxID0gb3MucHV0KHtcbiAgICAgICAgICAgICAgICAncGF0aCc6IGZ1bGxQYXRoLFxuICAgICAgICAgICAgICAgICdkaXInOiBfcGF0aDJbJ2RlZmF1bHQnXS5kaXJuYW1lKGRpciksXG4gICAgICAgICAgICAgICAgJ3R5cGUnOiAnZGlyZWN0b3J5J1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXEub25lcnJvciA9IHJlamVjdDtcbiAgICAgICAgICAgIHJlcS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuO1xuZnVuY3Rpb24gcm1kaXIoZnVsbFBhdGgpIHtcbiAgICByZXR1cm4gcmVhZGRpcihmdWxsUGF0aCkudGhlbihmdW5jdGlvbiByZW1vdmVGaWxlcyhmaWxlcykge1xuICAgICAgICBpZiAoIWZpbGVzIHx8ICFmaWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiByZW1vdmVGaWxlKGZ1bGxQYXRoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZmlsZSA9IGZpbGVzLnNoaWZ0KCksIGZ1bmMgPSBmaWxlLnR5cGUgPT09ICdkaXJlY3RvcnknID8gcm1kaXIgOiByZW1vdmVGaWxlO1xuICAgICAgICByZXR1cm4gZnVuYyhmaWxlLm5hbWUpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlbW92ZUZpbGVzKGZpbGVzKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG47IiwiLypmcy13ZWJAMS4wLjAjZGlyZWN0b3J5X2VudHJ5Ki9cbid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07XG59XG52YXIgX3BhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgX3BhdGgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGF0aCk7XG5mdW5jdGlvbiBEaXJlY3RvcnlFbnRyeShmdWxsUGF0aCwgdHlwZSkge1xuICAgIHRoaXMucGF0aCA9IGZ1bGxQYXRoO1xuICAgIHRoaXMubmFtZSA9IF9wYXRoMlsnZGVmYXVsdCddLmJhc2VuYW1lKGZ1bGxQYXRoKTtcbiAgICB0aGlzLmRpciA9IF9wYXRoMlsnZGVmYXVsdCddLmRpcm5hbWUoZnVsbFBhdGgpO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG59XG5leHBvcnRzWydkZWZhdWx0J10gPSBEaXJlY3RvcnlFbnRyeTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIi8qZnMtd2ViQDEuMC4wI2ZzKi9cbid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHtcbiAgICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG5ld09iaiA9IHt9O1xuICAgICAgICBpZiAob2JqICE9IG51bGwpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSlcbiAgICAgICAgICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuZXdPYmpbJ2RlZmF1bHQnXSA9IG9iajtcbiAgICAgICAgcmV0dXJuIG5ld09iajtcbiAgICB9XG59XG5mdW5jdGlvbiBfZGVmYXVsdHMob2JqLCBkZWZhdWx0cykge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZGVmYXVsdHMpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgdmFyIHZhbHVlID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihkZWZhdWx0cywga2V5KTtcbiAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlLmNvbmZpZ3VyYWJsZSAmJiBvYmpba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9O1xufVxudmFyIF9jb3JlID0gcmVxdWlyZSgnLi9jb3JlLmpzJyk7XG52YXIgX2RpcmVjdG9yeV9lbnRyeSA9IHJlcXVpcmUoJy4vZGlyZWN0b3J5X2VudHJ5LmpzJyk7XG52YXIgX2RpcmVjdG9yeV9lbnRyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXJlY3RvcnlfZW50cnkpO1xuX2RpcmVjdG9yeV9lbnRyeTJbJ2RlZmF1bHQnXS5wcm90b3R5cGUucmVhZEZpbGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICBpZiAodGhpcy50eXBlICE9PSAnZmlsZScpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTm90IGEgZmlsZS4nKTtcbiAgICB9XG4gICAgcmV0dXJuICgwLCBfY29yZS5yZWFkRmlsZSkodGhpcy5wYXRoLCBjYWxsYmFjayk7XG59O1xuX2RlZmF1bHRzKGV4cG9ydHMsIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9jb3JlKSk7XG5leHBvcnRzLkRpcmVjdG9yeUVudHJ5ID0gX2RpcmVjdG9yeV9lbnRyeTJbJ2RlZmF1bHQnXTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gcmVzb2x2ZXMgLiBhbmQgLi4gZWxlbWVudHMgaW4gYSBwYXRoIGFycmF5IHdpdGggZGlyZWN0b3J5IG5hbWVzIHRoZXJlXG4vLyBtdXN0IGJlIG5vIHNsYXNoZXMsIGVtcHR5IGVsZW1lbnRzLCBvciBkZXZpY2UgbmFtZXMgKGM6XFwpIGluIHRoZSBhcnJheVxuLy8gKHNvIGFsc28gbm8gbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2hlcyAtIGl0IGRvZXMgbm90IGRpc3Rpbmd1aXNoXG4vLyByZWxhdGl2ZSBhbmQgYWJzb2x1dGUgcGF0aHMpXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheShwYXJ0cywgYWxsb3dBYm92ZVJvb3QpIHtcbiAgLy8gaWYgdGhlIHBhdGggdHJpZXMgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIGB1cGAgZW5kcyB1cCA+IDBcbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IHBhcnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGxhc3QgPSBwYXJ0c1tpXTtcbiAgICBpZiAobGFzdCA9PT0gJy4nKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChsYXN0ID09PSAnLi4nKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICBpZiAoYWxsb3dBYm92ZVJvb3QpIHtcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgIHBhcnRzLnVuc2hpZnQoJy4uJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzO1xufVxuXG4vLyBTcGxpdCBhIGZpbGVuYW1lIGludG8gW3Jvb3QsIGRpciwgYmFzZW5hbWUsIGV4dF0sIHVuaXggdmVyc2lvblxuLy8gJ3Jvb3QnIGlzIGp1c3QgYSBzbGFzaCwgb3Igbm90aGluZy5cbnZhciBzcGxpdFBhdGhSZSA9XG4gICAgL14oXFwvP3wpKFtcXHNcXFNdKj8pKCg/OlxcLnsxLDJ9fFteXFwvXSs/fCkoXFwuW14uXFwvXSp8KSkoPzpbXFwvXSopJC87XG52YXIgc3BsaXRQYXRoID0gZnVuY3Rpb24oZmlsZW5hbWUpIHtcbiAgcmV0dXJuIHNwbGl0UGF0aFJlLmV4ZWMoZmlsZW5hbWUpLnNsaWNlKDEpO1xufTtcblxuLy8gcGF0aC5yZXNvbHZlKFtmcm9tIC4uLl0sIHRvKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5yZXNvbHZlID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXNvbHZlZFBhdGggPSAnJyxcbiAgICAgIHJlc29sdmVkQWJzb2x1dGUgPSBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkgPj0gLTEgJiYgIXJlc29sdmVkQWJzb2x1dGU7IGktLSkge1xuICAgIHZhciBwYXRoID0gKGkgPj0gMCkgPyBhcmd1bWVudHNbaV0gOiBwcm9jZXNzLmN3ZCgpO1xuXG4gICAgLy8gU2tpcCBlbXB0eSBhbmQgaW52YWxpZCBlbnRyaWVzXG4gICAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIHRvIHBhdGgucmVzb2x2ZSBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9IGVsc2UgaWYgKCFwYXRoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICByZXNvbHZlZFBhdGggPSBwYXRoICsgJy8nICsgcmVzb2x2ZWRQYXRoO1xuICAgIHJlc29sdmVkQWJzb2x1dGUgPSBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xuICB9XG5cbiAgLy8gQXQgdGhpcyBwb2ludCB0aGUgcGF0aCBzaG91bGQgYmUgcmVzb2x2ZWQgdG8gYSBmdWxsIGFic29sdXRlIHBhdGgsIGJ1dFxuICAvLyBoYW5kbGUgcmVsYXRpdmUgcGF0aHMgdG8gYmUgc2FmZSAobWlnaHQgaGFwcGVuIHdoZW4gcHJvY2Vzcy5jd2QoKSBmYWlscylcblxuICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcbiAgcmVzb2x2ZWRQYXRoID0gbm9ybWFsaXplQXJyYXkoZmlsdGVyKHJlc29sdmVkUGF0aC5zcGxpdCgnLycpLCBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuICEhcDtcbiAgfSksICFyZXNvbHZlZEFic29sdXRlKS5qb2luKCcvJyk7XG5cbiAgcmV0dXJuICgocmVzb2x2ZWRBYnNvbHV0ZSA/ICcvJyA6ICcnKSArIHJlc29sdmVkUGF0aCkgfHwgJy4nO1xufTtcblxuLy8gcGF0aC5ub3JtYWxpemUocGF0aClcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMubm9ybWFsaXplID0gZnVuY3Rpb24ocGF0aCkge1xuICB2YXIgaXNBYnNvbHV0ZSA9IGV4cG9ydHMuaXNBYnNvbHV0ZShwYXRoKSxcbiAgICAgIHRyYWlsaW5nU2xhc2ggPSBzdWJzdHIocGF0aCwgLTEpID09PSAnLyc7XG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHBhdGggPSBub3JtYWxpemVBcnJheShmaWx0ZXIocGF0aC5zcGxpdCgnLycpLCBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuICEhcDtcbiAgfSksICFpc0Fic29sdXRlKS5qb2luKCcvJyk7XG5cbiAgaWYgKCFwYXRoICYmICFpc0Fic29sdXRlKSB7XG4gICAgcGF0aCA9ICcuJztcbiAgfVxuICBpZiAocGF0aCAmJiB0cmFpbGluZ1NsYXNoKSB7XG4gICAgcGF0aCArPSAnLyc7XG4gIH1cblxuICByZXR1cm4gKGlzQWJzb2x1dGUgPyAnLycgOiAnJykgKyBwYXRoO1xufTtcblxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5pc0Fic29sdXRlID0gZnVuY3Rpb24ocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbn07XG5cbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMuam9pbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcGF0aHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuICByZXR1cm4gZXhwb3J0cy5ub3JtYWxpemUoZmlsdGVyKHBhdGhzLCBmdW5jdGlvbihwLCBpbmRleCkge1xuICAgIGlmICh0eXBlb2YgcCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLmpvaW4gbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfVxuICAgIHJldHVybiBwO1xuICB9KS5qb2luKCcvJykpO1xufTtcblxuXG4vLyBwYXRoLnJlbGF0aXZlKGZyb20sIHRvKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5yZWxhdGl2ZSA9IGZ1bmN0aW9uKGZyb20sIHRvKSB7XG4gIGZyb20gPSBleHBvcnRzLnJlc29sdmUoZnJvbSkuc3Vic3RyKDEpO1xuICB0byA9IGV4cG9ydHMucmVzb2x2ZSh0bykuc3Vic3RyKDEpO1xuXG4gIGZ1bmN0aW9uIHRyaW0oYXJyKSB7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBmb3IgKDsgc3RhcnQgPCBhcnIubGVuZ3RoOyBzdGFydCsrKSB7XG4gICAgICBpZiAoYXJyW3N0YXJ0XSAhPT0gJycpIGJyZWFrO1xuICAgIH1cblxuICAgIHZhciBlbmQgPSBhcnIubGVuZ3RoIC0gMTtcbiAgICBmb3IgKDsgZW5kID49IDA7IGVuZC0tKSB7XG4gICAgICBpZiAoYXJyW2VuZF0gIT09ICcnKSBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoc3RhcnQgPiBlbmQpIHJldHVybiBbXTtcbiAgICByZXR1cm4gYXJyLnNsaWNlKHN0YXJ0LCBlbmQgLSBzdGFydCArIDEpO1xuICB9XG5cbiAgdmFyIGZyb21QYXJ0cyA9IHRyaW0oZnJvbS5zcGxpdCgnLycpKTtcbiAgdmFyIHRvUGFydHMgPSB0cmltKHRvLnNwbGl0KCcvJykpO1xuXG4gIHZhciBsZW5ndGggPSBNYXRoLm1pbihmcm9tUGFydHMubGVuZ3RoLCB0b1BhcnRzLmxlbmd0aCk7XG4gIHZhciBzYW1lUGFydHNMZW5ndGggPSBsZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZnJvbVBhcnRzW2ldICE9PSB0b1BhcnRzW2ldKSB7XG4gICAgICBzYW1lUGFydHNMZW5ndGggPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdmFyIG91dHB1dFBhcnRzID0gW107XG4gIGZvciAodmFyIGkgPSBzYW1lUGFydHNMZW5ndGg7IGkgPCBmcm9tUGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBvdXRwdXRQYXJ0cy5wdXNoKCcuLicpO1xuICB9XG5cbiAgb3V0cHV0UGFydHMgPSBvdXRwdXRQYXJ0cy5jb25jYXQodG9QYXJ0cy5zbGljZShzYW1lUGFydHNMZW5ndGgpKTtcblxuICByZXR1cm4gb3V0cHV0UGFydHMuam9pbignLycpO1xufTtcblxuZXhwb3J0cy5zZXAgPSAnLyc7XG5leHBvcnRzLmRlbGltaXRlciA9ICc6JztcblxuZXhwb3J0cy5kaXJuYW1lID0gZnVuY3Rpb24ocGF0aCkge1xuICB2YXIgcmVzdWx0ID0gc3BsaXRQYXRoKHBhdGgpLFxuICAgICAgcm9vdCA9IHJlc3VsdFswXSxcbiAgICAgIGRpciA9IHJlc3VsdFsxXTtcblxuICBpZiAoIXJvb3QgJiYgIWRpcikge1xuICAgIC8vIE5vIGRpcm5hbWUgd2hhdHNvZXZlclxuICAgIHJldHVybiAnLic7XG4gIH1cblxuICBpZiAoZGlyKSB7XG4gICAgLy8gSXQgaGFzIGEgZGlybmFtZSwgc3RyaXAgdHJhaWxpbmcgc2xhc2hcbiAgICBkaXIgPSBkaXIuc3Vic3RyKDAsIGRpci5sZW5ndGggLSAxKTtcbiAgfVxuXG4gIHJldHVybiByb290ICsgZGlyO1xufTtcblxuXG5leHBvcnRzLmJhc2VuYW1lID0gZnVuY3Rpb24ocGF0aCwgZXh0KSB7XG4gIHZhciBmID0gc3BsaXRQYXRoKHBhdGgpWzJdO1xuICAvLyBUT0RPOiBtYWtlIHRoaXMgY29tcGFyaXNvbiBjYXNlLWluc2Vuc2l0aXZlIG9uIHdpbmRvd3M/XG4gIGlmIChleHQgJiYgZi5zdWJzdHIoLTEgKiBleHQubGVuZ3RoKSA9PT0gZXh0KSB7XG4gICAgZiA9IGYuc3Vic3RyKDAsIGYubGVuZ3RoIC0gZXh0Lmxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIGY7XG59O1xuXG5cbmV4cG9ydHMuZXh0bmFtZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgcmV0dXJuIHNwbGl0UGF0aChwYXRoKVszXTtcbn07XG5cbmZ1bmN0aW9uIGZpbHRlciAoeHMsIGYpIHtcbiAgICBpZiAoeHMuZmlsdGVyKSByZXR1cm4geHMuZmlsdGVyKGYpO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChmKHhzW2ldLCBpLCB4cykpIHJlcy5wdXNoKHhzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuLy8gU3RyaW5nLnByb3RvdHlwZS5zdWJzdHIgLSBuZWdhdGl2ZSBpbmRleCBkb24ndCB3b3JrIGluIElFOFxudmFyIHN1YnN0ciA9ICdhYicuc3Vic3RyKC0xKSA9PT0gJ2InXG4gICAgPyBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7IHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pIH1cbiAgICA6IGZ1bmN0aW9uIChzdHIsIHN0YXJ0LCBsZW4pIHtcbiAgICAgICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSBzdHIubGVuZ3RoICsgc3RhcnQ7XG4gICAgICAgIHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pO1xuICAgIH1cbjtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJ2YXIgRmlyZWJhc2VGcmFtZXIsIEhFSUdIVCwgSW5wdXQsIFdJRFRILCBiZywgYnV0dG9uLCBkZW1vREIsIGZpZWxkLCBmb290ZXIsIGZzLCBsaW5lSGVpZ2h0LCBwb3N0LCBzdHJlYW0sIHRleHRmaWVsZDtcblxuZnMgPSByZXF1aXJlKFwiZnMtd2ViXCIpO1xuXG5GaXJlYmFzZUZyYW1lciA9IHJlcXVpcmUoJ2ZpcmViYXNlZnJhbWVyJykuRmlyZWJhc2VGcmFtZXI7XG5cbklucHV0ID0gcmVxdWlyZShcImlucHV0ZmllbGRcIikuSW5wdXQ7XG5cbldJRFRIID0gRnJhbWVyLlNjcmVlbi53aWR0aDtcblxuSEVJR0hUID0gRnJhbWVyLlNjcmVlbi5oZWlnaHQ7XG5cbmxpbmVIZWlnaHQgPSAzMDtcblxuZnMucmVhZGRpcihcImltYWdlc1wiLCBmdW5jdGlvbihlcnIsIGZpbGVzKSB7XG4gIGNvbnNvbGUubG9nKGVycik7XG4gIHJldHVybiBjb25zb2xlLmxvZyhmaWxlcyk7XG59KTtcblxuRnJhbWVyLkRlZmF1bHRzLkFuaW1hdGlvbiA9IHtcbiAgY3VydmU6ICdzcHJpbmcoMTUwLCAxMCwgMCknXG59O1xuXG5kZW1vREIgPSBuZXcgRmlyZWJhc2VGcmFtZXIoe1xuICBwcm9qZWN0SUQ6IFwiZnJhbWVyLXNrZXRjaC1maXJlYmFzZS10ZXN0XCIsXG4gIHNlY3JldDogXCJsSHdzSzRsamh3VW1NdDNFVTF5YnJNUFFjU0RnYktodlRJd3VxSjlJXCIsXG4gIHNlcnZlcjogXCJzLXVzYzFjLW5zcy0xMzQuZmlyZWJhc2Vpby5jb21cIlxufSk7XG5cbmJnID0gbmV3IEJhY2tncm91bmRMYXllcih7XG4gIGJhY2tncm91bmRDb2xvcjogXCIjZmFmYWZhXCJcbn0pO1xuXG5mb290ZXIgPSBuZXcgTGF5ZXIoe1xuICB4OiAwLFxuICB5OiBDYW52YXMuaGVpZ2h0IC0gMjMwLFxuICB3aWR0aDogQ2FudmFzLndpZHRoLFxuICBoZWlnaHQ6IDIzMCxcbiAgYmFja2dyb3VuZENvbG9yOiBcIiM5OTlcIlxufSk7XG5cbnN0cmVhbSA9IG5ldyBMYXllcih7XG4gIHg6IDAsXG4gIHk6IDAsXG4gIHdpZHRoOiBDYW52YXMud2lkdGgsXG4gIGhlaWdodDogQ2FudmFzLmhlaWdodCAtIDIzMCxcbiAgYmFja2dyb3VuZENvbG9yOiBcInRyYW5zcGFyZW50XCJcbn0pO1xuXG5idXR0b24gPSBuZXcgTGF5ZXIoe1xuICB4OiA2MjAsXG4gIHk6IENhbnZhcy5oZWlnaHQgLSAyMDAsXG4gIHdpZHRoOiA1MCxcbiAgaGVpZ2h0OiA1MCxcbiAgaW1hZ2U6IFwiaW1hZ2VzL2J1dHRvbi5wbmdcIlxufSk7XG5cbmJ1dHRvbi5vbk1vdXNlRG93bihmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGJ1dHRvbi5pbWFnZSA9IFwiaW1hZ2VzL2J1dHRvbi1kb3duLnBuZ1wiO1xufSk7XG5cbmZpZWxkID0gbmV3IExheWVyKHtcbiAgeDogMTAwLFxuICB5OiBDYW52YXMuaGVpZ2h0IC0gMjAwLFxuICB3aWR0aDogNTIwLFxuICBoZWlnaHQ6IDUwLFxuICBpbWFnZTogXCJpbWFnZXMvZmllbGQucG5nXCJcbn0pO1xuXG50ZXh0ZmllbGQgPSBuZXcgSW5wdXQoe1xuICBzZXR1cDogZmFsc2UsXG4gIHR5cGU6IFwidGV4dFwiLFxuICB4OiAxMDAsXG4gIHk6IENhbnZhcy5oZWlnaHQgLSAyMDAsXG4gIHdpZHRoOiA1MDAsXG4gIGhlaWdodDogMzBcbn0pO1xuXG50ZXh0ZmllbGQuc3R5bGUgPSB7XG4gIGZvbnRTaXplOiBcIjE0cHhcIixcbiAgY29sb3I6IFwiIzMzM1wiLFxuICBmb250RmFtaWx5OiBcIkhlbHZldGljYVwiLFxuICBwYWRkaW5nOiBcIjEwcHggMTBweCAxMHB4IDIwcHhcIlxufTtcblxucG9zdCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGV4dGZpZWxkLnZhbHVlLmxlbmd0aCkge1xuICAgIHJldHVybiBkZW1vREIucG9zdCgnL21lc3NhZ2VzJywge1xuICAgICAgXCJ0ZXh0XCI6IHRleHRmaWVsZC52YWx1ZVxuICAgIH0pO1xuICB9XG59O1xuXG5kZW1vREIub25DaGFuZ2UoXCIvbWVzc2FnZXNcIiwgZnVuY3Rpb24obWVzc2FnZSkge1xuICB2YXIgY2hpbGQsIGgsIGksIGosIGssIGxlbiwgbGluZSwgbSwgbWVzc2FnZUFycmF5LCByZWYsIHJlZjEsIHJlc3VsdHMsIHQ7XG4gIHJlZiA9IHN0cmVhbS5jaGlsZHJlbjtcbiAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgY2hpbGQgPSByZWZbal07XG4gICAgY2hpbGQuYW5pbWF0ZSh7XG4gICAgICB5OiBjaGlsZC55IC0gbGluZUhlaWdodFxuICAgIH0pO1xuICB9XG4gIG1lc3NhZ2VBcnJheSA9IF8udG9BcnJheShtZXNzYWdlKTtcbiAgaSA9IDE7XG4gIGggPSBsaW5lSGVpZ2h0O1xuICByZXN1bHRzID0gW107XG4gIGZvciAoayA9IG1lc3NhZ2VBcnJheS5sZW5ndGggLSAxOyBrID49IDA7IGsgKz0gLTEpIHtcbiAgICBtID0gbWVzc2FnZUFycmF5W2tdO1xuICAgIHQgPSAocmVmMSA9IG0udGV4dCkgIT0gbnVsbCA/IHJlZjEgOiBtO1xuICAgIGxpbmUgPSBuZXcgVGV4dExheWVyKHtcbiAgICAgIHg6IDEyMCxcbiAgICAgIHRleHRBbGlnbjogXCJsZWZ0XCIsXG4gICAgICB5OiBDYW52YXMuaGVpZ2h0IC0gMjUwIC0gaCAqIGksXG4gICAgICB0ZXh0OiB0LFxuICAgICAgY29sb3I6IFwiIzMzM1wiLFxuICAgICAgZm9udDogXCIxNHB4LzEuNSBIZWx2ZXRpY2FcIlxuICAgIH0pO1xuICAgIGxpbmUucGFyZW50ID0gc3RyZWFtO1xuICAgIHJlc3VsdHMucHVzaChpKyspO1xuICB9XG4gIHJldHVybiByZXN1bHRzO1xufSk7XG5cbmJ1dHRvbi5vbk1vdXNlVXAoZnVuY3Rpb24oKSB7XG4gIGJ1dHRvbi5pbWFnZSA9IFwiaW1hZ2VzL2J1dHRvbi5wbmdcIjtcbiAgcmV0dXJuIHBvc3QoKTtcbn0pO1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGlmIChldmVudC5rZXlDb2RlID09PSAxMykge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgcG9zdCgpO1xuICAgIHJldHVybiB0ZXh0ZmllbGQudmFsdWUgPSBcIlwiO1xuICB9XG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDFWelpYSnpMMnBsWm1aeVpYa3VhR0Z5Y21sekwwUmxkbVZzYjNCdFpXNTBMMlp5WVcxbGNpMXphMlYwWTJndFptbHlaV0poYzJVdFltOXBiR1Z5Y0d4aGRHVXZjM0pqTDJGd2NDNWpiMlptWldVaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXZWWE5sY25NdmFtVm1abkpsZVM1b1lYSnlhWE12UkdWMlpXeHZjRzFsYm5RdlpuSmhiV1Z5TFhOclpYUmphQzFtYVhKbFltRnpaUzFpYjJsc1pYSndiR0YwWlM5emNtTXZZWEJ3TG1OdlptWmxaU0pkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRkJPenRCUVVGQkxFVkJRVUVzUjBGQlN5eFBRVUZCTEVOQlFWRXNVVUZCVWpzN1FVRkRTaXhwUWtGQmEwSXNUMEZCUVN4RFFVRlJMR2RDUVVGU096dEJRVU5zUWl4UlFVRlRMRTlCUVVFc1EwRkJVU3haUVVGU096dEJRVVZXTEV0QlFVRXNSMEZCVVN4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRE96dEJRVU4wUWl4TlFVRkJMRWRCUVZNc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF6czdRVUZGZGtJc1ZVRkJRU3hIUVVGaE96dEJRVVZpTEVWQlFVVXNRMEZCUXl4UFFVRklMRU5CUVZjc1VVRkJXQ3hGUVVGeFFpeFRRVUZETEVkQlFVUXNSVUZCVFN4TFFVRk9PMFZCUTJwQ0xFOUJRVThzUTBGQlF5eEhRVUZTTEVOQlFWa3NSMEZCV2p0VFFVTkJMRTlCUVU4c1EwRkJReXhIUVVGU0xFTkJRVmtzUzBGQldqdEJRVVpwUWl4RFFVRnlRanM3UVVGSlFTeE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRk5CUVdoQ0xFZEJRMFU3UlVGQlFTeExRVUZCTEVWQlFVOHNiMEpCUVZBN096dEJRVVZHTEUxQlFVRXNSMEZCVXl4SlFVRkpMR05CUVVvc1EwRkRVanRGUVVGQkxGTkJRVUVzUlVGQlZ5dzJRa0ZCV0R0RlFVTkJMRTFCUVVFc1JVRkJVU3d3UTBGRVVqdEZRVVZCTEUxQlFVRXNSVUZCVVN4blEwRkdVanREUVVSUk96dEJRVXRVTEVWQlFVRXNSMEZCU3l4SlFVRkpMR1ZCUVVvc1EwRkRSRHRGUVVGQkxHVkJRVUVzUlVGQmFVSXNVMEZCYWtJN1EwRkVRenM3UVVGSFRDeE5RVUZCTEVkQlFWTXNTVUZCU1N4TFFVRktMRU5CUTB3N1JVRkJRU3hEUVVGQkxFVkJRVWtzUTBGQlNqdEZRVU5CTEVOQlFVRXNSVUZCU1N4TlFVRk5MRU5CUVVNc1RVRkJVQ3hIUVVGblFpeEhRVVJ3UWp0RlFVVkJMRXRCUVVFc1JVRkJUeXhOUVVGTkxFTkJRVU1zUzBGR1pEdEZRVWRCTEUxQlFVRXNSVUZCVVN4SFFVaFNPMFZCU1VFc1pVRkJRU3hGUVVGcFFpeE5RVXBxUWp0RFFVUkxPenRCUVU5VUxFMUJRVUVzUjBGQlV5eEpRVUZKTEV0QlFVb3NRMEZEVER0RlFVRkJMRU5CUVVFc1JVRkJSeXhEUVVGSU8wVkJRMEVzUTBGQlFTeEZRVUZITEVOQlJFZzdSVUZGUVN4TFFVRkJMRVZCUVU4c1RVRkJUU3hEUVVGRExFdEJSbVE3UlVGSFFTeE5RVUZCTEVWQlFWRXNUVUZCVFN4RFFVRkRMRTFCUVZBc1IwRkJaMElzUjBGSWVFSTdSVUZKUVN4bFFVRkJMRVZCUVdsQ0xHRkJTbXBDTzBOQlJFczdPMEZCVTFRc1RVRkJRU3hIUVVGVExFbEJRVWtzUzBGQlNpeERRVU5NTzBWQlFVRXNRMEZCUVN4RlFVRkhMRWRCUVVnN1JVRkRRU3hEUVVGQkxFVkJRVWNzVFVGQlRTeERRVUZETEUxQlFWQXNSMEZCWjBJc1IwRkVia0k3UlVGRlFTeExRVUZCTEVWQlFVOHNSVUZHVUR0RlFVZEJMRTFCUVVFc1JVRkJVU3hGUVVoU08wVkJTVUVzUzBGQlFTeEZRVUZQTEcxQ1FVcFFPME5CUkVzN08wRkJUMVFzVFVGQlRTeERRVUZETEZkQlFWQXNRMEZCYlVJc1UwRkJRVHRUUVVObUxFMUJRVTBzUTBGQlF5eExRVUZRTEVkQlFXVTdRVUZFUVN4RFFVRnVRanM3UVVGSFFTeExRVUZCTEVkQlFWRXNTVUZCU1N4TFFVRktMRU5CUTBvN1JVRkJRU3hEUVVGQkxFVkJRVWNzUjBGQlNEdEZRVU5CTEVOQlFVRXNSVUZCUnl4TlFVRk5MRU5CUVVNc1RVRkJVQ3hIUVVGblFpeEhRVVJ1UWp0RlFVVkJMRXRCUVVFc1JVRkJUeXhIUVVaUU8wVkJSMEVzVFVGQlFTeEZRVUZSTEVWQlNGSTdSVUZKUVN4TFFVRkJMRVZCUVU4c2EwSkJTbEE3UTBGRVNUczdRVUZQVWl4VFFVRkJMRWRCUVZrc1NVRkJTU3hMUVVGS0xFTkJRMUk3UlVGQlFTeExRVUZCTEVWQlFVOHNTMEZCVUR0RlFVTkJMRWxCUVVFc1JVRkJUU3hOUVVST08wVkJSVUVzUTBGQlFTeEZRVUZITEVkQlJrZzdSVUZIUVN4RFFVRkJMRVZCUVVjc1RVRkJUU3hEUVVGRExFMUJRVkFzUjBGQlowSXNSMEZJYmtJN1JVRkpRU3hMUVVGQkxFVkJRVThzUjBGS1VEdEZRVXRCTEUxQlFVRXNSVUZCVVN4RlFVeFNPME5CUkZFN08wRkJVVm9zVTBGQlV5eERRVUZETEV0QlFWWXNSMEZEU1R0RlFVRkJMRkZCUVVFc1JVRkJWU3hOUVVGV08wVkJRMEVzUzBGQlFTeEZRVUZQTEUxQlJGQTdSVUZGUVN4VlFVRkJMRVZCUVZrc1YwRkdXanRGUVVkQkxFOUJRVUVzUlVGQlV5eHhRa0ZJVkRzN08wRkJUMG9zU1VGQlFTeEhRVUZQTEZOQlFVRTdSVUZEU0N4SlFVRkhMRk5CUVZNc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQmJrSTdWMEZEU1N4TlFVRk5MRU5CUVVNc1NVRkJVQ3hEUVVGWkxGZEJRVm9zUlVGQmVVSTdUVUZCUXl4TlFVRkJMRVZCUVZFc1UwRkJVeXhEUVVGRExFdEJRVzVDTzB0QlFYcENMRVZCUkVvN08wRkJSRWM3TzBGQlowSlFMRTFCUVUwc1EwRkJReXhSUVVGUUxFTkJRV2RDTEZkQlFXaENMRVZCUVRaQ0xGTkJRVU1zVDBGQlJEdEJRVU42UWl4TlFVRkJPMEZCUVVFN1FVRkJRU3hQUVVGQkxIRkRRVUZCT3p0SlFVTkpMRXRCUVVzc1EwRkJReXhQUVVGT0xFTkJRMGs3VFVGQlFTeERRVUZCTEVWQlFVY3NTMEZCU3l4RFFVRkRMRU5CUVU0c1IwRkJWU3hWUVVGaU8wdEJSRW83UVVGRVNqdEZRVWRCTEZsQlFVRXNSMEZCWlN4RFFVRkRMRU5CUVVNc1QwRkJSaXhEUVVGVkxFOUJRVlk3UlVGRlppeERRVUZCTEVkQlFVazdSVUZEU2l4RFFVRkJMRWRCUVVrN1FVRkZTanRQUVVGQkxEUkRRVUZCT3p0SlFVTkpMRU5CUVVFc2IwTkJRV0U3U1VGRFlpeEpRVUZCTEVkQlFVOHNTVUZCU1N4VFFVRktMRU5CUTBnN1RVRkJRU3hEUVVGQkxFVkJRVWNzUjBGQlNEdE5RVU5CTEZOQlFVRXNSVUZCVnl4TlFVUllPMDFCUlVFc1EwRkJRU3hGUVVGSExFMUJRVTBzUTBGQlF5eE5RVUZRTEVkQlFXZENMRWRCUVdoQ0xFZEJRWE5DTEVOQlFVRXNSMEZCU1N4RFFVWTNRanROUVVkQkxFbEJRVUVzUlVGQlRTeERRVWhPTzAxQlNVRXNTMEZCUVN4RlFVRlBMRTFCU2xBN1RVRkxRU3hKUVVGQkxFVkJRVTBzYjBKQlRFNDdTMEZFUnp0SlFVOVFMRWxCUVVrc1EwRkJReXhOUVVGTUxFZEJRV003YVVKQlEyUXNRMEZCUVR0QlFWWktPenRCUVZSNVFpeERRVUUzUWpzN1FVRnhRa0VzVFVGQlRTeERRVUZETEZOQlFWQXNRMEZCYVVJc1UwRkJRVHRGUVVOaUxFMUJRVTBzUTBGQlF5eExRVUZRTEVkQlFXVTdVMEZEWml4SlFVRkJMRU5CUVVFN1FVRkdZU3hEUVVGcVFqczdRVUZKUVN4UlFVRlJMRU5CUVVNc1owSkJRVlFzUTBGQk1FSXNWVUZCTVVJc1JVRkJjME1zVTBGQlF5eExRVUZFTzBWQlEyeERMRWxCUVVjc1MwRkJTeXhEUVVGRExFOUJRVTRzUzBGQmFVSXNSVUZCY0VJN1NVRkRTU3hMUVVGTExFTkJRVU1zWTBGQlRpeERRVUZCTzBsQlEwRXNTVUZCUVN4RFFVRkJPMWRCUTBFc1UwRkJVeXhEUVVGRExFdEJRVllzUjBGQmEwSXNSMEZJZEVJN08wRkJSR3RETEVOQlFYUkRJbjA9XG4iLCJ2YXIgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbmV4cG9ydHMuRmlyZWJhc2VGcmFtZXIgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICB2YXIgZ2V0Q09SU3VybCwgcmVxdWVzdDtcblxuICBleHRlbmQoRmlyZWJhc2VGcmFtZXIsIHN1cGVyQ2xhc3MpO1xuXG4gIGdldENPUlN1cmwgPSBmdW5jdGlvbihzZXJ2ZXIsIHBhdGgsIHNlY3JldCwgcHJvamVjdCkge1xuICAgIHZhciB1cmw7XG4gICAgc3dpdGNoIChVdGlscy5pc1dlYktpdCgpKSB7XG4gICAgICBjYXNlIHRydWU6XG4gICAgICAgIHVybCA9IFwiaHR0cHM6Ly9cIiArIHNlcnZlciArIHBhdGggKyBcIi5qc29uP2F1dGg9XCIgKyBzZWNyZXQgKyBcIiZucz1cIiArIHByb2plY3QgKyBcIiZzc2U9dHJ1ZVwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHVybCA9IFwiaHR0cHM6Ly9cIiArIHByb2plY3QgKyBcIi5maXJlYmFzZWlvLmNvbVwiICsgcGF0aCArIFwiLmpzb24/YXV0aD1cIiArIHNlY3JldDtcbiAgICB9XG4gICAgcmV0dXJuIHVybDtcbiAgfTtcblxuICBGaXJlYmFzZUZyYW1lci5kZWZpbmUoXCJzdGF0dXNcIiwge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3RhdHVzO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gRmlyZWJhc2VGcmFtZXIob3B0aW9ucykge1xuICAgIHZhciBiYXNlLCBiYXNlMSwgYmFzZTIsIGJhc2UzO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMgOiB7fTtcbiAgICB0aGlzLnByb2plY3RJRCA9IChiYXNlID0gdGhpcy5vcHRpb25zKS5wcm9qZWN0SUQgIT0gbnVsbCA/IGJhc2UucHJvamVjdElEIDogYmFzZS5wcm9qZWN0SUQgPSBudWxsO1xuICAgIHRoaXMuc2VjcmV0ID0gKGJhc2UxID0gdGhpcy5vcHRpb25zKS5zZWNyZXQgIT0gbnVsbCA/IGJhc2UxLnNlY3JldCA6IGJhc2UxLnNlY3JldCA9IG51bGw7XG4gICAgdGhpcy5zZXJ2ZXIgPSAoYmFzZTIgPSB0aGlzLm9wdGlvbnMpLnNlcnZlciAhPSBudWxsID8gYmFzZTIuc2VydmVyIDogYmFzZTIuc2VydmVyID0gdm9pZCAwO1xuICAgIHRoaXMuZGVidWcgPSAoYmFzZTMgPSB0aGlzLm9wdGlvbnMpLmRlYnVnICE9IG51bGwgPyBiYXNlMy5kZWJ1ZyA6IGJhc2UzLmRlYnVnID0gZmFsc2U7XG4gICAgaWYgKHRoaXMuX3N0YXR1cyA9PSBudWxsKSB7XG4gICAgICB0aGlzLl9zdGF0dXMgPSBcImRpc2Nvbm5lY3RlZFwiO1xuICAgIH1cbiAgICBGaXJlYmFzZUZyYW1lci5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodGhpcy5zZXJ2ZXIgPT09IHZvaWQgMCkge1xuICAgICAgVXRpbHMuZG9tTG9hZEpTT04oXCJodHRwczovL1wiICsgdGhpcy5wcm9qZWN0SUQgKyBcIi5maXJlYmFzZWlvLmNvbS8uc2V0dGluZ3Mvb3duZXIuanNvblwiLCBmdW5jdGlvbihhLCBzZXJ2ZXIpIHtcbiAgICAgICAgdmFyIG1zZztcbiAgICAgICAgcHJpbnQobXNnID0gXCJBZGQgX19fX19fIHNlcnZlcjpcIiArICcgICBcIicgKyBzZXJ2ZXIgKyAnXCInICsgXCIgX19fX18gdG8geW91ciBpbnN0YW5jZSBvZiBGaXJlYmFzZS5cIik7XG4gICAgICAgIGlmICh0aGlzLmRlYnVnKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKFwiRmlyZWJhc2U6IFwiICsgbXNnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmRlYnVnKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkZpcmViYXNlOiBDb25uZWN0aW5nIHRvIEZpcmViYXNlIFByb2plY3QgJ1wiICsgdGhpcy5wcm9qZWN0SUQgKyBcIicgLi4uIFxcbiBVUkw6ICdcIiArIChnZXRDT1JTdXJsKHRoaXMuc2VydmVyLCBcIi9cIiwgdGhpcy5zZWNyZXQsIHRoaXMucHJvamVjdElEKSkgKyBcIidcIik7XG4gICAgfVxuICAgIHRoaXMub25DaGFuZ2UoXCJjb25uZWN0aW9uXCIpO1xuICB9XG5cbiAgcmVxdWVzdCA9IGZ1bmN0aW9uKHByb2plY3QsIHNlY3JldCwgcGF0aCwgY2FsbGJhY2ssIG1ldGhvZCwgZGF0YSwgcGFyYW1ldGVycywgZGVidWcpIHtcbiAgICB2YXIgdXJsLCB4aHR0cDtcbiAgICB1cmwgPSBcImh0dHBzOi8vXCIgKyBwcm9qZWN0ICsgXCIuZmlyZWJhc2Vpby5jb21cIiArIHBhdGggKyBcIi5qc29uP2F1dGg9XCIgKyBzZWNyZXQ7XG4gICAgaWYgKHBhcmFtZXRlcnMgIT09IHZvaWQgMCkge1xuICAgICAgaWYgKHBhcmFtZXRlcnMuc2hhbGxvdykge1xuICAgICAgICB1cmwgKz0gXCImc2hhbGxvdz10cnVlXCI7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1ldGVycy5mb3JtYXQgPT09IFwiZXhwb3J0XCIpIHtcbiAgICAgICAgdXJsICs9IFwiJmZvcm1hdD1leHBvcnRcIjtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAocGFyYW1ldGVycy5wcmludCkge1xuICAgICAgICBjYXNlIFwicHJldHR5XCI6XG4gICAgICAgICAgdXJsICs9IFwiJnByaW50PXByZXR0eVwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwic2lsZW50XCI6XG4gICAgICAgICAgdXJsICs9IFwiJnByaW50PXNpbGVudFwiO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBwYXJhbWV0ZXJzLmRvd25sb2FkID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHVybCArPSBcIiZkb3dubG9hZD1cIiArIHBhcmFtZXRlcnMuZG93bmxvYWQ7XG4gICAgICAgIHdpbmRvdy5vcGVuKHVybCwgXCJfc2VsZlwiKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcGFyYW1ldGVycy5vcmRlckJ5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHVybCArPSBcIiZvcmRlckJ5PVwiICsgJ1wiJyArIHBhcmFtZXRlcnMub3JkZXJCeSArICdcIic7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHBhcmFtZXRlcnMubGltaXRUb0ZpcnN0ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHVybCArPSBcIiZsaW1pdFRvRmlyc3Q9XCIgKyBwYXJhbWV0ZXJzLmxpbWl0VG9GaXJzdDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcGFyYW1ldGVycy5saW1pdFRvTGFzdCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICB1cmwgKz0gXCImbGltaXRUb0xhc3Q9XCIgKyBwYXJhbWV0ZXJzLmxpbWl0VG9MYXN0O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBwYXJhbWV0ZXJzLnN0YXJ0QXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdXJsICs9IFwiJnN0YXJ0QXQ9XCIgKyBwYXJhbWV0ZXJzLnN0YXJ0QXQ7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHBhcmFtZXRlcnMuZW5kQXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdXJsICs9IFwiJmVuZEF0PVwiICsgcGFyYW1ldGVycy5lbmRBdDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcGFyYW1ldGVycy5lcXVhbFRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHVybCArPSBcIiZlcXVhbFRvPVwiICsgcGFyYW1ldGVycy5lcXVhbFRvO1xuICAgICAgfVxuICAgIH1cbiAgICB4aHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdDtcbiAgICBpZiAoZGVidWcpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiRmlyZWJhc2U6IE5ldyAnXCIgKyBtZXRob2QgKyBcIictcmVxdWVzdCB3aXRoIGRhdGE6ICdcIiArIChKU09OLnN0cmluZ2lmeShkYXRhKSkgKyBcIicgXFxuIFVSTDogJ1wiICsgdXJsICsgXCInXCIpO1xuICAgIH1cbiAgICB4aHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHBhcmFtZXRlcnMgIT09IHZvaWQgMCkge1xuICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLnByaW50ID09PSBcInNpbGVudFwiIHx8IHR5cGVvZiBwYXJhbWV0ZXJzLmRvd25sb2FkID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoeGh0dHAucmVhZHlTdGF0ZSkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGlmIChkZWJ1Zykge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkZpcmViYXNlOiBSZXF1ZXN0IG5vdCBpbml0aWFsaXplZCBcXG4gVVJMOiAnXCIgKyB1cmwgKyBcIidcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBpZiAoZGVidWcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJGaXJlYmFzZTogU2VydmVyIGNvbm5lY3Rpb24gZXN0YWJsaXNoZWQgXFxuIFVSTDogJ1wiICsgdXJsICsgXCInXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgaWYgKGRlYnVnKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRmlyZWJhc2U6IFJlcXVlc3QgcmVjZWl2ZWQgXFxuIFVSTDogJ1wiICsgdXJsICsgXCInXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgaWYgKGRlYnVnKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRmlyZWJhc2U6IFByb2Nlc3NpbmcgcmVxdWVzdCBcXG4gVVJMOiAnXCIgKyB1cmwgKyBcIidcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBjYWxsYmFjayhKU09OLnBhcnNlKHhodHRwLnJlc3BvbnNlVGV4dCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlYnVnKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRmlyZWJhc2U6IFJlcXVlc3QgZmluaXNoZWQsIHJlc3BvbnNlOiAnXCIgKyAoSlNPTi5wYXJzZSh4aHR0cC5yZXNwb25zZVRleHQpKSArIFwiJyBcXG4gVVJMOiAnXCIgKyB1cmwgKyBcIidcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHhodHRwLnN0YXR1cyA9PT0gXCI0MDRcIikge1xuICAgICAgICAgIGlmIChkZWJ1Zykge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihcIkZpcmViYXNlOiBJbnZhbGlkIHJlcXVlc3QsIHBhZ2Ugbm90IGZvdW5kIFxcbiBVUkw6ICdcIiArIHVybCArIFwiJ1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkodGhpcyk7XG4gICAgeGh0dHAub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gICAgeGh0dHAuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtdHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIik7XG4gICAgcmV0dXJuIHhodHRwLnNlbmQoZGF0YSA9IFwiXCIgKyAoSlNPTi5zdHJpbmdpZnkoZGF0YSkpKTtcbiAgfTtcblxuICBGaXJlYmFzZUZyYW1lci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24ocGF0aCwgY2FsbGJhY2ssIHBhcmFtZXRlcnMpIHtcbiAgICByZXR1cm4gcmVxdWVzdCh0aGlzLnByb2plY3RJRCwgdGhpcy5zZWNyZXQsIHBhdGgsIGNhbGxiYWNrLCBcIkdFVFwiLCBudWxsLCBwYXJhbWV0ZXJzLCB0aGlzLmRlYnVnKTtcbiAgfTtcblxuICBGaXJlYmFzZUZyYW1lci5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24ocGF0aCwgZGF0YSwgY2FsbGJhY2ssIHBhcmFtZXRlcnMpIHtcbiAgICByZXR1cm4gcmVxdWVzdCh0aGlzLnByb2plY3RJRCwgdGhpcy5zZWNyZXQsIHBhdGgsIGNhbGxiYWNrLCBcIlBVVFwiLCBkYXRhLCBwYXJhbWV0ZXJzLCB0aGlzLmRlYnVnKTtcbiAgfTtcblxuICBGaXJlYmFzZUZyYW1lci5wcm90b3R5cGUucG9zdCA9IGZ1bmN0aW9uKHBhdGgsIGRhdGEsIGNhbGxiYWNrLCBwYXJhbWV0ZXJzKSB7XG4gICAgcmV0dXJuIHJlcXVlc3QodGhpcy5wcm9qZWN0SUQsIHRoaXMuc2VjcmV0LCBwYXRoLCBjYWxsYmFjaywgXCJQT1NUXCIsIGRhdGEsIHBhcmFtZXRlcnMsIHRoaXMuZGVidWcpO1xuICB9O1xuXG4gIEZpcmViYXNlRnJhbWVyLnByb3RvdHlwZS5wYXRjaCA9IGZ1bmN0aW9uKHBhdGgsIGRhdGEsIGNhbGxiYWNrLCBwYXJhbWV0ZXJzKSB7XG4gICAgcmV0dXJuIHJlcXVlc3QodGhpcy5wcm9qZWN0SUQsIHRoaXMuc2VjcmV0LCBwYXRoLCBjYWxsYmFjaywgXCJQQVRDSFwiLCBkYXRhLCBwYXJhbWV0ZXJzLCB0aGlzLmRlYnVnKTtcbiAgfTtcblxuICBGaXJlYmFzZUZyYW1lci5wcm90b3R5cGVbXCJkZWxldGVcIl0gPSBmdW5jdGlvbihwYXRoLCBjYWxsYmFjaywgcGFyYW1ldGVycykge1xuICAgIHJldHVybiByZXF1ZXN0KHRoaXMucHJvamVjdElELCB0aGlzLnNlY3JldCwgcGF0aCwgY2FsbGJhY2ssIFwiREVMRVRFXCIsIG51bGwsIHBhcmFtZXRlcnMsIHRoaXMuZGVidWcpO1xuICB9O1xuXG4gIEZpcmViYXNlRnJhbWVyLnByb3RvdHlwZS5vbkNoYW5nZSA9IGZ1bmN0aW9uKHBhdGgsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGN1cnJlbnRTdGF0dXMsIHNvdXJjZSwgdXJsO1xuICAgIGlmIChwYXRoID09PSBcImNvbm5lY3Rpb25cIikge1xuICAgICAgdXJsID0gZ2V0Q09SU3VybCh0aGlzLnNlcnZlciwgXCIvXCIsIHRoaXMuc2VjcmV0LCB0aGlzLnByb2plY3RJRCk7XG4gICAgICBjdXJyZW50U3RhdHVzID0gXCJkaXNjb25uZWN0ZWRcIjtcbiAgICAgIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSh1cmwpO1xuICAgICAgc291cmNlLmFkZEV2ZW50TGlzdGVuZXIoXCJvcGVuXCIsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGN1cnJlbnRTdGF0dXMgPT09IFwiZGlzY29ubmVjdGVkXCIpIHtcbiAgICAgICAgICAgIF90aGlzLl9zdGF0dXMgPSBcImNvbm5lY3RlZFwiO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2soXCJjb25uZWN0ZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3RoaXMuZGVidWcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJGaXJlYmFzZTogQ29ubmVjdGlvbiB0byBGaXJlYmFzZSBQcm9qZWN0ICdcIiArIF90aGlzLnByb2plY3RJRCArIFwiJyBlc3RhYmxpc2hlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnRTdGF0dXMgPSBcImNvbm5lY3RlZFwiO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgICAgcmV0dXJuIHNvdXJjZS5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoY3VycmVudFN0YXR1cyA9PT0gXCJjb25uZWN0ZWRcIikge1xuICAgICAgICAgICAgX3RoaXMuX3N0YXR1cyA9IFwiZGlzY29ubmVjdGVkXCI7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBjYWxsYmFjayhcImRpc2Nvbm5lY3RlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfdGhpcy5kZWJ1Zykge1xuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJGaXJlYmFzZTogQ29ubmVjdGlvbiB0byBGaXJlYmFzZSBQcm9qZWN0ICdcIiArIF90aGlzLnByb2plY3RJRCArIFwiJyBjbG9zZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjdXJyZW50U3RhdHVzID0gXCJkaXNjb25uZWN0ZWRcIjtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdXJsID0gZ2V0Q09SU3VybCh0aGlzLnNlcnZlciwgcGF0aCwgdGhpcy5zZWNyZXQsIHRoaXMucHJvamVjdElEKTtcbiAgICAgIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSh1cmwpO1xuICAgICAgaWYgKHRoaXMuZGVidWcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJGaXJlYmFzZTogTGlzdGVuaW5nIHRvIGNoYW5nZXMgbWFkZSB0byAnXCIgKyBwYXRoICsgXCInIFxcbiBVUkw6ICdcIiArIHVybCArIFwiJ1wiKTtcbiAgICAgIH1cbiAgICAgIHNvdXJjZS5hZGRFdmVudExpc3RlbmVyKFwicHV0XCIsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgICAgICAgY2FsbGJhY2soSlNPTi5wYXJzZShldi5kYXRhKS5kYXRhLCBcInB1dFwiLCBKU09OLnBhcnNlKGV2LmRhdGEpLnBhdGNoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKF90aGlzLmRlYnVnKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS5sb2coXCJGaXJlYmFzZTogUmVjZWl2ZWQgY2hhbmdlcyBtYWRlIHRvICdcIiArIHBhdGggKyBcIicgdmlhICdQVVQnOiBcIiArIChKU09OLnBhcnNlKGV2LmRhdGEpLmRhdGEpICsgXCIgXFxuIFVSTDogJ1wiICsgdXJsICsgXCInXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpKTtcbiAgICAgIHJldHVybiBzb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcihcInBhdGNoXCIsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgICAgICAgY2FsbGJhY2soSlNPTi5wYXJzZShldi5kYXRhKS5kYXRhLCBcInBhdGNoXCIsIEpTT04ucGFyc2UoZXYuZGF0YSkucGF0Y2gpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoX3RoaXMuZGVidWcpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhcIkZpcmViYXNlOiBSZWNlaXZlZCBjaGFuZ2VzIG1hZGUgdG8gJ1wiICsgcGF0aCArIFwiJyB2aWEgJ1BBVENIJzogXCIgKyAoSlNPTi5wYXJzZShldi5kYXRhKS5kYXRhKSArIFwiIFxcbiBVUkw6ICdcIiArIHVybCArIFwiJ1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBGaXJlYmFzZUZyYW1lcjtcblxufSkoRnJhbWVyLkJhc2VDbGFzcyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUwxVnpaWEp6TDJwbFptWnlaWGt1YUdGeWNtbHpMMFJsZG1Wc2IzQnRaVzUwTDJaeVlXMWxjaTF6YTJWMFkyZ3RabWx5WldKaGMyVXRZbTlwYkdWeWNHeGhkR1V2YzNKakwyMXZaSFZzWlhNdlptbHlaV0poYzJWbWNtRnRaWEl1WTI5bVptVmxJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTDFWelpYSnpMMnBsWm1aeVpYa3VhR0Z5Y21sekwwUmxkbVZzYjNCdFpXNTBMMlp5WVcxbGNpMXphMlYwWTJndFptbHlaV0poYzJVdFltOXBiR1Z5Y0d4aGRHVXZjM0pqTDIxdlpIVnNaWE12Wm1seVpXSmhjMlZtY21GdFpYSXVZMjltWm1WbElsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFXbENRU3hKUVVGQk96czdRVUZCVFN4UFFVRlBMRU5CUVVNN1FVRkpZaXhOUVVGQk96czdPMFZCUVVFc1ZVRkJRU3hIUVVGaExGTkJRVU1zVFVGQlJDeEZRVUZUTEVsQlFWUXNSVUZCWlN4TlFVRm1MRVZCUVhWQ0xFOUJRWFpDTzBGQlJWb3NVVUZCUVR0QlFVRkJMRmxCUVU4c1MwRkJTeXhEUVVGRExGRkJRVTRzUTBGQlFTeERRVUZRTzBGQlFVRXNWMEZEVFN4SlFVUk9PMUZCUTJkQ0xFZEJRVUVzUjBGQlRTeFZRVUZCTEVkQlFWY3NUVUZCV0N4SFFVRnZRaXhKUVVGd1FpeEhRVUY1UWl4aFFVRjZRaXhIUVVGelF5eE5RVUYwUXl4SFFVRTJReXhOUVVFM1F5eEhRVUZ0UkN4UFFVRnVSQ3hIUVVFeVJEdEJRVUV6UlR0QlFVUk9PMUZCUldkQ0xFZEJRVUVzUjBGQlRTeFZRVUZCTEVkQlFWY3NUMEZCV0N4SFFVRnRRaXhwUWtGQmJrSXNSMEZCYjBNc1NVRkJjRU1zUjBGQmVVTXNZVUZCZWtNc1IwRkJjMFE3UVVGR05VVTdRVUZKUVN4WFFVRlBPMFZCVGtzN08wVkJVMklzWTBGQlF5eERRVUZETEUxQlFVWXNRMEZCVXl4UlFVRlVMRVZCUTBNN1NVRkJRU3hIUVVGQkxFVkJRVXNzVTBGQlFUdGhRVUZITEVsQlFVTXNRMEZCUVR0SlFVRktMRU5CUVV3N1IwRkVSRHM3UlVGSFlTeDNRa0ZCUXl4UFFVRkVPMEZCUTFvc1VVRkJRVHRKUVVSaExFbEJRVU1zUTBGQlFTdzBRa0ZCUkN4VlFVRlRPMGxCUTNSQ0xFbEJRVU1zUTBGQlFTeFRRVUZFTEdsRVFVRnhRaXhEUVVGRExHZENRVUZFTEVOQlFVTXNXVUZCWVR0SlFVTnVReXhKUVVGRExFTkJRVUVzVFVGQlJDeG5SRUZCY1VJc1EwRkJReXhqUVVGRUxFTkJRVU1zVTBGQllUdEpRVU51UXl4SlFVRkRMRU5CUVVFc1RVRkJSQ3huUkVGQmNVSXNRMEZCUXl4alFVRkVMRU5CUVVNc1UwRkJZVHRKUVVOdVF5eEpRVUZETEVOQlFVRXNTMEZCUkN3clEwRkJjVUlzUTBGQlF5eGhRVUZFTEVOQlFVTXNVVUZCWVRzN1RVRkRia01zU1VGQlF5eERRVUZCTEZWQlFXdERPenRKUVVOdVF5eHBSRUZCUVN4VFFVRkJPMGxCUjBFc1NVRkJSeXhKUVVGRExFTkJRVUVzVFVGQlJDeExRVUZYTEUxQlFXUTdUVUZEUXl4TFFVRkxMRU5CUVVNc1YwRkJUaXhEUVVGclFpeFZRVUZCTEVkQlFWY3NTVUZCUXl4RFFVRkJMRk5CUVZvc1IwRkJjMElzYzBOQlFYaERMRVZCUVN0RkxGTkJRVU1zUTBGQlJDeEZRVUZITEUxQlFVZzdRVUZET1VVc1dVRkJRVHRSUVVGQkxFdEJRVUVzUTBGQlRTeEhRVUZCTEVkQlFVMHNiMEpCUVVFc1IwRkJkVUlzVFVGQmRrSXNSMEZCWjBNc1RVRkJhRU1zUjBGQmVVTXNSMEZCZWtNc1IwRkJLME1zYzBOQlFUTkVPMUZCUTBFc1NVRkJhME1zU1VGQlF5eERRVUZCTEV0QlFXNURPMmxDUVVGQkxFOUJRVThzUTBGQlF5eEhRVUZTTEVOQlFWa3NXVUZCUVN4SFFVRmhMRWRCUVhwQ0xFVkJRVUU3TzAxQlJqaEZMRU5CUVM5RkxFVkJSRVE3TzBsQlRVRXNTVUZCZVVrc1NVRkJReXhEUVVGQkxFdEJRVEZKTzAxQlFVRXNUMEZCVHl4RFFVRkRMRWRCUVZJc1EwRkJXU3cwUTBGQlFTeEhRVUUyUXl4SlFVRkRMRU5CUVVFc1UwRkJPVU1zUjBGQmQwUXNhVUpCUVhoRUxFZEJRWGRGTEVOQlFVTXNWVUZCUVN4RFFVRlhMRWxCUVVNc1EwRkJRU3hOUVVGYUxFVkJRVzlDTEVkQlFYQkNMRVZCUVhsQ0xFbEJRVU1zUTBGQlFTeE5RVUV4UWl4RlFVRnJReXhKUVVGRExFTkJRVUVzVTBGQmJrTXNRMEZCUkN4RFFVRjRSU3hIUVVGMVNDeEhRVUZ1U1N4RlFVRkJPenRKUVVOQkxFbEJRVU1zUTBGQlF5eFJRVUZHTEVOQlFWY3NXVUZCV0R0RlFXaENXVHM3UlVGdFFtSXNUMEZCUVN4SFFVRlZMRk5CUVVNc1QwRkJSQ3hGUVVGVkxFMUJRVllzUlVGQmEwSXNTVUZCYkVJc1JVRkJkMElzVVVGQmVFSXNSVUZCYTBNc1RVRkJiRU1zUlVGQk1FTXNTVUZCTVVNc1JVRkJaMFFzVlVGQmFFUXNSVUZCTkVRc1MwRkJOVVE3UVVGRlZDeFJRVUZCTzBsQlFVRXNSMEZCUVN4SFFVRk5MRlZCUVVFc1IwRkJWeXhQUVVGWUxFZEJRVzFDTEdsQ1FVRnVRaXhIUVVGdlF5eEpRVUZ3UXl4SFFVRjVReXhoUVVGNlF5eEhRVUZ6UkR0SlFVYzFSQ3hKUVVGUExGVkJRVUVzUzBGQll5eE5RVUZ5UWp0TlFVTkRMRWxCUVVjc1ZVRkJWU3hEUVVGRExFOUJRV1E3VVVGQmMwTXNSMEZCUVN4SlFVRlBMR2RDUVVFM1F6czdUVUZEUVN4SlFVRkhMRlZCUVZVc1EwRkJReXhOUVVGWUxFdEJRWEZDTEZGQlFYaENPMUZCUVhORExFZEJRVUVzU1VGQlR5eHBRa0ZCTjBNN08wRkJSVUVzWTBGQlR5eFZRVUZWTEVOQlFVTXNTMEZCYkVJN1FVRkJRU3hoUVVOTkxGRkJSRTQ3VlVGRGIwSXNSMEZCUVN4SlFVRlBPMEZCUVhKQ08wRkJSRTRzWVVGRlRTeFJRVVpPTzFWQlJXOUNMRWRCUVVFc1NVRkJUenRCUVVZelFqdE5RVWxCTEVsQlFVY3NUMEZCVHl4VlFVRlZMRU5CUVVNc1VVRkJiRUlzUzBGQk9FSXNVVUZCYWtNN1VVRkRReXhIUVVGQkxFbEJRVThzV1VGQlFTeEhRVUZoTEZWQlFWVXNRMEZCUXp0UlFVTXZRaXhOUVVGTkxFTkJRVU1zU1VGQlVDeERRVUZaTEVkQlFWb3NSVUZCWjBJc1QwRkJhRUlzUlVGR1JEczdUVUZMUVN4SlFVRjFSQ3hQUVVGUExGVkJRVlVzUTBGQlF5eFBRVUZzUWl4TFFVRnJReXhSUVVGNlJqdFJRVUZCTEVkQlFVRXNTVUZCVHl4WFFVRkJMRWRCUVdNc1IwRkJaQ3hIUVVGdlFpeFZRVUZWTEVOQlFVTXNUMEZCTDBJc1IwRkJlVU1zU1VGQmFFUTdPMDFCUTBFc1NVRkJkVVFzVDBGQlR5eFZRVUZWTEVOQlFVTXNXVUZCYkVJc1MwRkJhME1zVVVGQmVrWTdVVUZCUVN4SFFVRkJMRWxCUVU4c1owSkJRVUVzUjBGQmFVSXNWVUZCVlN4RFFVRkRMR0ZCUVc1RE96dE5RVU5CTEVsQlFYVkVMRTlCUVU4c1ZVRkJWU3hEUVVGRExGZEJRV3hDTEV0QlFXdERMRkZCUVhwR08xRkJRVUVzUjBGQlFTeEpRVUZQTEdWQlFVRXNSMEZCWjBJc1ZVRkJWU3hEUVVGRExGbEJRV3hET3p0TlFVTkJMRWxCUVhWRUxFOUJRVThzVlVGQlZTeERRVUZETEU5QlFXeENMRXRCUVd0RExGRkJRWHBHTzFGQlFVRXNSMEZCUVN4SlFVRlBMRmRCUVVFc1IwRkJXU3hWUVVGVkxFTkJRVU1zVVVGQk9VSTdPMDFCUTBFc1NVRkJkVVFzVDBGQlR5eFZRVUZWTEVOQlFVTXNTMEZCYkVJc1MwRkJhME1zVVVGQmVrWTdVVUZCUVN4SFFVRkJMRWxCUVU4c1UwRkJRU3hIUVVGVkxGVkJRVlVzUTBGQlF5eE5RVUUxUWpzN1RVRkRRU3hKUVVGMVJDeFBRVUZQTEZWQlFWVXNRMEZCUXl4UFFVRnNRaXhMUVVGclF5eFJRVUY2Ump0UlFVRkJMRWRCUVVFc1NVRkJUeXhYUVVGQkxFZEJRVmtzVlVGQlZTeERRVUZETEZGQlFUbENPMDlCYkVKRU96dEpRWEZDUVN4TFFVRkJMRWRCUVZFc1NVRkJTVHRKUVVOYUxFbEJRWGxITEV0QlFYcEhPMDFCUVVFc1QwRkJUeXhEUVVGRExFZEJRVklzUTBGQldTeHBRa0ZCUVN4SFFVRnJRaXhOUVVGc1FpeEhRVUY1UWl4M1FrRkJla0lzUjBGQlowUXNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJUQ3hEUVVGbExFbEJRV1lzUTBGQlJDeERRVUZvUkN4SFFVRnpSU3hoUVVGMFJTeEhRVUZ0Uml4SFFVRnVSaXhIUVVGMVJpeEhRVUZ1Unl4RlFVRkJPenRKUVVOQkxFdEJRVXNzUTBGQlF5eHJRa0ZCVGl4SFFVRXlRaXhEUVVGQkxGTkJRVUVzUzBGQlFUdGhRVUZCTEZOQlFVRTdVVUZGTVVJc1NVRkJUeXhWUVVGQkxFdEJRV01zVFVGQmNrSTdWVUZEUXl4SlFVRkhMRlZCUVZVc1EwRkJReXhMUVVGWUxFdEJRVzlDTEZGQlFYQkNMRWxCUVdkRExFOUJRVThzVlVGQlZTeERRVUZETEZGQlFXeENMRXRCUVRoQ0xGRkJRV3BGTzBGQlFTdEZMRzFDUVVFdlJUdFhRVVJFT3p0QlFVZEJMR2RDUVVGUExFdEJRVXNzUTBGQlF5eFZRVUZpTzBGQlFVRXNaVUZEVFN4RFFVUk9PMWxCUTJFc1NVRkJNRVVzUzBGQk1VVTdZMEZCUVN4UFFVRlBMRU5CUVVNc1IwRkJVaXhEUVVGWkxEWkRRVUZCTEVkQlFUaERMRWRCUVRsRExFZEJRV3RFTEVkQlFUbEVMRVZCUVVFN08wRkJRVkE3UVVGRVRpeGxRVVZOTEVOQlJrNDdXVUZGWVN4SlFVRXdSU3hMUVVFeFJUdGpRVUZCTEU5QlFVOHNRMEZCUXl4SFFVRlNMRU5CUVZrc2JVUkJRVUVzUjBGQmIwUXNSMEZCY0VRc1IwRkJkMFFzUjBGQmNFVXNSVUZCUVRzN1FVRkJVRHRCUVVaT0xHVkJSMDBzUTBGSVRqdFpRVWRoTEVsQlFUQkZMRXRCUVRGRk8yTkJRVUVzVDBGQlR5eERRVUZETEVkQlFWSXNRMEZCV1N4elEwRkJRU3hIUVVGMVF5eEhRVUYyUXl4SFFVRXlReXhIUVVGMlJDeEZRVUZCT3p0QlFVRlFPMEZCU0U0c1pVRkpUU3hEUVVwT08xbEJTV0VzU1VGQk1FVXNTMEZCTVVVN1kwRkJRU3hQUVVGUExFTkJRVU1zUjBGQlVpeERRVUZaTEhkRFFVRkJMRWRCUVhsRExFZEJRWHBETEVkQlFUWkRMRWRCUVhwRUxFVkJRVUU3TzBGQlFWQTdRVUZLVGl4bFFVdE5MRU5CVEU0N1dVRk5SU3hKUVVFMFF5eG5Ra0ZCTlVNN1kwRkJRU3hSUVVGQkxFTkJRVk1zU1VGQlNTeERRVUZETEV0QlFVd3NRMEZCVnl4TFFVRkxMRU5CUVVNc1dVRkJha0lzUTBGQlZDeEZRVUZCT3p0WlFVTkJMRWxCUVRSSExFdEJRVFZITzJOQlFVRXNUMEZCVHl4RFFVRkRMRWRCUVZJc1EwRkJXU3g1UTBGQlFTeEhRVUY1UXl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTUxFTkJRVmNzUzBGQlN5eERRVUZETEZsQlFXcENMRU5CUVVRc1EwRkJla01zUjBGQmVVVXNZVUZCZWtVc1IwRkJjMFlzUjBGQmRFWXNSMEZCTUVZc1IwRkJkRWNzUlVGQlFUczdRVUZRUmp0UlFWTkJMRWxCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTRzUzBGQlowSXNTMEZCYmtJN1ZVRkRReXhKUVVFMlJTeExRVUUzUlR0dFFrRkJRU3hQUVVGUExFTkJRVU1zU1VGQlVpeERRVUZoTEhGRVFVRkJMRWRCUVhORUxFZEJRWFJFTEVkQlFUQkVMRWRCUVhaRkxFVkJRVUU3VjBGRVJEczdUVUZrTUVJN1NVRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFTeEpRVUZCTzBsQmEwSXpRaXhMUVVGTExFTkJRVU1zU1VGQlRpeERRVUZYTEUxQlFWZ3NSVUZCYlVJc1IwRkJia0lzUlVGQmQwSXNTVUZCZUVJN1NVRkRRU3hMUVVGTExFTkJRVU1zWjBKQlFVNHNRMEZCZFVJc1kwRkJka0lzUlVGQmRVTXNhVU5CUVhaRE8xZEJRMEVzUzBGQlN5eERRVUZETEVsQlFVNHNRMEZCVnl4SlFVRkJMRWRCUVU4c1JVRkJRU3hIUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFVd3NRMEZCWlN4SlFVRm1MRU5CUVVRc1EwRkJjRUk3UlVGb1JGTTdPekpDUVhORVZpeEhRVUZCTEVkQlFWRXNVMEZCUXl4SlFVRkVMRVZCUVU4c1VVRkJVQ3hGUVVGMVFpeFZRVUYyUWp0WFFVRnpReXhQUVVGQkxFTkJRVkVzU1VGQlF5eERRVUZCTEZOQlFWUXNSVUZCYjBJc1NVRkJReXhEUVVGQkxFMUJRWEpDTEVWQlFUWkNMRWxCUVRkQ0xFVkJRVzFETEZGQlFXNURMRVZCUVRaRExFdEJRVGRETEVWQlFYVkVMRWxCUVhaRUxFVkJRVFpFTEZWQlFUZEVMRVZCUVhsRkxFbEJRVU1zUTBGQlFTeExRVUV4UlR0RlFVRjBRenM3TWtKQlExSXNSMEZCUVN4SFFVRlJMRk5CUVVNc1NVRkJSQ3hGUVVGUExFbEJRVkFzUlVGQllTeFJRVUZpTEVWQlFYVkNMRlZCUVhaQ08xZEJRWE5ETEU5QlFVRXNRMEZCVVN4SlFVRkRMRU5CUVVFc1UwRkJWQ3hGUVVGdlFpeEpRVUZETEVOQlFVRXNUVUZCY2tJc1JVRkJOa0lzU1VGQk4wSXNSVUZCYlVNc1VVRkJia01zUlVGQk5rTXNTMEZCTjBNc1JVRkJkVVFzU1VGQmRrUXNSVUZCTmtRc1ZVRkJOMFFzUlVGQmVVVXNTVUZCUXl4RFFVRkJMRXRCUVRGRk8wVkJRWFJET3pzeVFrRkRVaXhKUVVGQkxFZEJRVkVzVTBGQlF5eEpRVUZFTEVWQlFVOHNTVUZCVUN4RlFVRmhMRkZCUVdJc1JVRkJkVUlzVlVGQmRrSTdWMEZCYzBNc1QwRkJRU3hEUVVGUkxFbEJRVU1zUTBGQlFTeFRRVUZVTEVWQlFXOUNMRWxCUVVNc1EwRkJRU3hOUVVGeVFpeEZRVUUyUWl4SlFVRTNRaXhGUVVGdFF5eFJRVUZ1UXl4RlFVRTJReXhOUVVFM1F5eEZRVUYxUkN4SlFVRjJSQ3hGUVVFMlJDeFZRVUUzUkN4RlFVRjVSU3hKUVVGRExFTkJRVUVzUzBGQk1VVTdSVUZCZEVNN096SkNRVU5TTEV0QlFVRXNSMEZCVVN4VFFVRkRMRWxCUVVRc1JVRkJUeXhKUVVGUUxFVkJRV0VzVVVGQllpeEZRVUYxUWl4VlFVRjJRanRYUVVGelF5eFBRVUZCTEVOQlFWRXNTVUZCUXl4RFFVRkJMRk5CUVZRc1JVRkJiMElzU1VGQlF5eERRVUZCTEUxQlFYSkNMRVZCUVRaQ0xFbEJRVGRDTEVWQlFXMURMRkZCUVc1RExFVkJRVFpETEU5QlFUZERMRVZCUVhWRUxFbEJRWFpFTEVWQlFUWkVMRlZCUVRkRUxFVkJRWGxGTEVsQlFVTXNRMEZCUVN4TFFVRXhSVHRGUVVGMFF6czdORUpCUTFJc1VVRkJRU3hIUVVGUkxGTkJRVU1zU1VGQlJDeEZRVUZQTEZGQlFWQXNSVUZCZFVJc1ZVRkJka0k3VjBGQmMwTXNUMEZCUVN4RFFVRlJMRWxCUVVNc1EwRkJRU3hUUVVGVUxFVkJRVzlDTEVsQlFVTXNRMEZCUVN4TlFVRnlRaXhGUVVFMlFpeEpRVUUzUWl4RlFVRnRReXhSUVVGdVF5eEZRVUUyUXl4UlFVRTNReXhGUVVGMVJDeEpRVUYyUkN4RlFVRTJSQ3hWUVVFM1JDeEZRVUY1UlN4SlFVRkRMRU5CUVVFc1MwRkJNVVU3UlVGQmRFTTdPekpDUVVsU0xGRkJRVUVzUjBGQlZTeFRRVUZETEVsQlFVUXNSVUZCVHl4UlFVRlFPMEZCUjFRc1VVRkJRVHRKUVVGQkxFbEJRVWNzU1VGQlFTeExRVUZSTEZsQlFWZzdUVUZGUXl4SFFVRkJMRWRCUVUwc1ZVRkJRU3hEUVVGWExFbEJRVU1zUTBGQlFTeE5RVUZhTEVWQlFXOUNMRWRCUVhCQ0xFVkJRWGxDTEVsQlFVTXNRMEZCUVN4TlFVRXhRaXhGUVVGclF5eEpRVUZETEVOQlFVRXNVMEZCYmtNN1RVRkRUaXhoUVVGQkxFZEJRV2RDTzAxQlEyaENMRTFCUVVFc1IwRkJVeXhKUVVGSkxGZEJRVW9zUTBGQlowSXNSMEZCYUVJN1RVRkZWQ3hOUVVGTkxFTkJRVU1zWjBKQlFWQXNRMEZCZDBJc1RVRkJlRUlzUlVGQlowTXNRMEZCUVN4VFFVRkJMRXRCUVVFN1pVRkJRU3hUUVVGQk8xVkJReTlDTEVsQlFVY3NZVUZCUVN4TFFVRnBRaXhqUVVGd1FqdFpRVU5ETEV0QlFVTXNRMEZCUXl4UFFVRkdMRWRCUVZrN1dVRkRXaXhKUVVGNVFpeG5Ra0ZCZWtJN1kwRkJRU3hSUVVGQkxFTkJRVk1zVjBGQlZDeEZRVUZCT3p0WlFVTkJMRWxCUVhOR0xFdEJRVU1zUTBGQlFTeExRVUYyUmp0alFVRkJMRTlCUVU4c1EwRkJReXhIUVVGU0xFTkJRVmtzTkVOQlFVRXNSMEZCTmtNc1MwRkJReXhEUVVGQkxGTkJRVGxETEVkQlFYZEVMR1ZCUVhCRkxFVkJRVUU3WVVGSVJEczdhVUpCU1VFc1lVRkJRU3hIUVVGblFqdFJRVXhsTzAxQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFc1NVRkJRU3hEUVVGb1F6dGhRVTlCTEUxQlFVMHNRMEZCUXl4blFrRkJVQ3hEUVVGM1FpeFBRVUY0UWl4RlFVRnBReXhEUVVGQkxGTkJRVUVzUzBGQlFUdGxRVUZCTEZOQlFVRTdWVUZEYUVNc1NVRkJSeXhoUVVGQkxFdEJRV2xDTEZkQlFYQkNPMWxCUTBNc1MwRkJReXhEUVVGRExFOUJRVVlzUjBGQldUdFpRVU5hTEVsQlFUUkNMR2RDUVVFMVFqdGpRVUZCTEZGQlFVRXNRMEZCVXl4alFVRlVMRVZCUVVFN08xbEJRMEVzU1VGQmEwWXNTMEZCUXl4RFFVRkJMRXRCUVc1R08yTkJRVUVzVDBGQlR5eERRVUZETEVsQlFWSXNRMEZCWVN3MFEwRkJRU3hIUVVFMlF5eExRVUZETEVOQlFVRXNVMEZCT1VNc1IwRkJkMFFzVlVGQmNrVXNSVUZCUVR0aFFVaEVPenRwUWtGSlFTeGhRVUZCTEVkQlFXZENPMUZCVEdkQ08wMUJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRXNTVUZCUVN4RFFVRnFReXhGUVdKRU8wdEJRVUVzVFVGQlFUdE5RWFZDUXl4SFFVRkJMRWRCUVUwc1ZVRkJRU3hEUVVGWExFbEJRVU1zUTBGQlFTeE5RVUZhTEVWQlFXOUNMRWxCUVhCQ0xFVkJRVEJDTEVsQlFVTXNRMEZCUVN4TlFVRXpRaXhGUVVGdFF5eEpRVUZETEVOQlFVRXNVMEZCY0VNN1RVRkRUaXhOUVVGQkxFZEJRVk1zU1VGQlNTeFhRVUZLTEVOQlFXZENMRWRCUVdoQ08wMUJRMVFzU1VGQmJVWXNTVUZCUXl4RFFVRkJMRXRCUVhCR08xRkJRVUVzVDBGQlR5eERRVUZETEVkQlFWSXNRMEZCV1N3d1EwRkJRU3hIUVVFeVF5eEpRVUV6UXl4SFFVRm5SQ3hoUVVGb1JDeEhRVUUyUkN4SFFVRTNSQ3hIUVVGcFJTeEhRVUUzUlN4RlFVRkJPenROUVVWQkxFMUJRVTBzUTBGQlF5eG5Ra0ZCVUN4RFFVRjNRaXhMUVVGNFFpeEZRVUVyUWl4RFFVRkJMRk5CUVVFc1MwRkJRVHRsUVVGQkxGTkJRVU1zUlVGQlJEdFZRVU01UWl4SlFVRjNSU3huUWtGQmVFVTdXVUZCUVN4UlFVRkJMRU5CUVZNc1NVRkJTU3hEUVVGRExFdEJRVXdzUTBGQlZ5eEZRVUZGTEVOQlFVTXNTVUZCWkN4RFFVRnRRaXhEUVVGRExFbEJRVGRDTEVWQlFXMURMRXRCUVc1RExFVkJRVEJETEVsQlFVa3NRMEZCUXl4TFFVRk1MRU5CUVZjc1JVRkJSU3hEUVVGRExFbEJRV1FzUTBGQmJVSXNRMEZCUXl4TFFVRTVSQ3hGUVVGQk96dFZRVU5CTEVsQlFYTklMRXRCUVVNc1EwRkJRU3hMUVVGMlNEdHRRa0ZCUVN4UFFVRlBMRU5CUVVNc1IwRkJVaXhEUVVGWkxITkRRVUZCTEVkQlFYVkRMRWxCUVhaRExFZEJRVFJETEdWQlFUVkRMRWRCUVRCRUxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVd3NRMEZCVnl4RlFVRkZMRU5CUVVNc1NVRkJaQ3hEUVVGdFFpeERRVUZETEVsQlFYSkNMRU5CUVRGRUxFZEJRVzlHTEZsQlFYQkdMRWRCUVdkSExFZEJRV2hITEVkQlFXOUhMRWRCUVdoSUxFVkJRVUU3TzFGQlJqaENPMDFCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUVzU1VGQlFTeERRVUV2UWp0aFFVbEJMRTFCUVUwc1EwRkJReXhuUWtGQlVDeERRVUYzUWl4UFFVRjRRaXhGUVVGcFF5eERRVUZCTEZOQlFVRXNTMEZCUVR0bFFVRkJMRk5CUVVNc1JVRkJSRHRWUVVOb1F5eEpRVUV3UlN4blFrRkJNVVU3V1VGQlFTeFJRVUZCTEVOQlFWTXNTVUZCU1N4RFFVRkRMRXRCUVV3c1EwRkJWeXhGUVVGRkxFTkJRVU1zU1VGQlpDeERRVUZ0UWl4RFFVRkRMRWxCUVRkQ0xFVkJRVzFETEU5QlFXNURMRVZCUVRSRExFbEJRVWtzUTBGQlF5eExRVUZNTEVOQlFWY3NSVUZCUlN4RFFVRkRMRWxCUVdRc1EwRkJiVUlzUTBGQlF5eExRVUZvUlN4RlFVRkJPenRWUVVOQkxFbEJRWGRJTEV0QlFVTXNRMEZCUVN4TFFVRjZTRHR0UWtGQlFTeFBRVUZQTEVOQlFVTXNSMEZCVWl4RFFVRlpMSE5EUVVGQkxFZEJRWFZETEVsQlFYWkRMRWRCUVRSRExHbENRVUUxUXl4SFFVRTBSQ3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZNTEVOQlFWY3NSVUZCUlN4RFFVRkRMRWxCUVdRc1EwRkJiVUlzUTBGQlF5eEpRVUZ5UWl4RFFVRTFSQ3hIUVVGelJpeFpRVUYwUml4SFFVRnJSeXhIUVVGc1J5eEhRVUZ6Unl4SFFVRnNTQ3hGUVVGQk96dFJRVVpuUXp0TlFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQkxFbEJRVUVzUTBGQmFrTXNSVUV2UWtRN08wVkJTRk03T3pzN1IwRnFSekJDTEUxQlFVMHNRMEZCUXlKOVxuIiwidmFyIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5leHBvcnRzLklucHV0ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKElucHV0LCBzdXBlckNsYXNzKTtcblxuICBJbnB1dC5kZWZpbmUoXCJzdHlsZVwiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmlucHV0LnN0eWxlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIF8uZXh0ZW5kKHRoaXMuaW5wdXQuc3R5bGUsIHZhbHVlKTtcbiAgICB9XG4gIH0pO1xuXG4gIElucHV0LmRlZmluZShcInZhbHVlXCIsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5wdXQudmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnB1dC52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gSW5wdXQob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09IG51bGwpIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuc2V0dXAgPT0gbnVsbCkge1xuICAgICAgb3B0aW9ucy5zZXR1cCA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy53aWR0aCA9PSBudWxsKSB7XG4gICAgICBvcHRpb25zLndpZHRoID0gU2NyZWVuLndpZHRoO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5jbGlwID09IG51bGwpIHtcbiAgICAgIG9wdGlvbnMuY2xpcCA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5oZWlnaHQgPT0gbnVsbCkge1xuICAgICAgb3B0aW9ucy5oZWlnaHQgPSA2MDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuYmFja2dyb3VuZENvbG9yID09IG51bGwpIHtcbiAgICAgIG9wdGlvbnMuYmFja2dyb3VuZENvbG9yID0gb3B0aW9ucy5zZXR1cCA/IFwicmdiYSgyNTUsIDYwLCA0NywgLjUpXCIgOiBcInRyYW5zcGFyZW50XCI7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmZvbnRTaXplID09IG51bGwpIHtcbiAgICAgIG9wdGlvbnMuZm9udFNpemUgPSAzMDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMubGluZUhlaWdodCA9PSBudWxsKSB7XG4gICAgICBvcHRpb25zLmxpbmVIZWlnaHQgPSAzMDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMucGFkZGluZyA9PSBudWxsKSB7XG4gICAgICBvcHRpb25zLnBhZGRpbmcgPSAxMDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuZm9udEZhbWlseSA9PSBudWxsKSB7XG4gICAgICBvcHRpb25zLmZvbnRGYW1pbHkgPSBcIlwiO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5vcGFjaXR5ID09IG51bGwpIHtcbiAgICAgIG9wdGlvbnMub3BhY2l0eSA9IDE7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnRleHQgPT0gbnVsbCkge1xuICAgICAgb3B0aW9ucy50ZXh0ID0gXCJcIjtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMucGxhY2Vob2xkZXIgPT0gbnVsbCkge1xuICAgICAgb3B0aW9ucy5wbGFjZWhvbGRlciA9IFwiXCI7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnR5cGUgPT0gbnVsbCkge1xuICAgICAgb3B0aW9ucy50eXBlID0gXCJ0ZXh0XCI7XG4gICAgfVxuICAgIElucHV0Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLnBsYWNlaG9sZGVyQ29sb3IgIT0gbnVsbCkge1xuICAgICAgdGhpcy5wbGFjZWhvbGRlckNvbG9yID0gb3B0aW9ucy5wbGFjZWhvbGRlckNvbG9yO1xuICAgIH1cbiAgICB0aGlzLmlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIHRoaXMuaW5wdXQuaWQgPSBcImlucHV0LVwiICsgKF8ubm93KCkpO1xuICAgIHRoaXMuaW5wdXQuc3R5bGUuY3NzVGV4dCA9IFwiZm9udC1zaXplOiBcIiArIG9wdGlvbnMuZm9udFNpemUgKyBcInB4OyBsaW5lLWhlaWdodDogXCIgKyBvcHRpb25zLmxpbmVIZWlnaHQgKyBcInB4OyBwYWRkaW5nOiBcIiArIG9wdGlvbnMucGFkZGluZyArIFwicHg7IHdpZHRoOiBcIiArIG9wdGlvbnMud2lkdGggKyBcInB4OyBoZWlnaHQ6IFwiICsgb3B0aW9ucy5oZWlnaHQgKyBcInB4OyBib3JkZXI6IG5vbmU7IG91dGxpbmUtd2lkdGg6IDA7IGJhY2tncm91bmQtaW1hZ2U6IHVybChhYm91dDpibGFuayk7IGJhY2tncm91bmQtY29sb3I6IFwiICsgb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IgKyBcIjsgZm9udC1mYW1pbHk6IFwiICsgb3B0aW9ucy5mb250RmFtaWx5ICsgXCI7IG9wYWNpdHk6IFwiICsgb3B0aW9ucy5vcGFjaXR5ICsgXCI7XCI7XG4gICAgdGhpcy5pbnB1dC52YWx1ZSA9IG9wdGlvbnMudGV4dDtcbiAgICB0aGlzLmlucHV0LnR5cGUgPSBvcHRpb25zLnR5cGU7XG4gICAgdGhpcy5pbnB1dC5wbGFjZWhvbGRlciA9IG9wdGlvbnMucGxhY2Vob2xkZXI7XG4gICAgdGhpcy5mb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIik7XG4gICAgdGhpcy5mb3JtLmFwcGVuZENoaWxkKHRoaXMuaW5wdXQpO1xuICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5mb3JtKTtcbiAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9IFwidHJhbnNwYXJlbnRcIjtcbiAgICBpZiAodGhpcy5wbGFjZWhvbGRlckNvbG9yKSB7XG4gICAgICB0aGlzLnVwZGF0ZVBsYWNlaG9sZGVyQ29sb3Iob3B0aW9ucy5wbGFjZWhvbGRlckNvbG9yKTtcbiAgICB9XG4gIH1cblxuICBJbnB1dC5wcm90b3R5cGUudXBkYXRlUGxhY2Vob2xkZXJDb2xvciA9IGZ1bmN0aW9uKGNvbG9yKSB7XG4gICAgdmFyIGNzcztcbiAgICB0aGlzLnBsYWNlaG9sZGVyQ29sb3IgPSBjb2xvcjtcbiAgICBpZiAodGhpcy5wYWdlU3R5bGUgIT0gbnVsbCkge1xuICAgICAgZG9jdW1lbnQuaGVhZC5yZW1vdmVDaGlsZCh0aGlzLnBhZ2VTdHlsZSk7XG4gICAgfVxuICAgIHRoaXMucGFnZVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgIHRoaXMucGFnZVN0eWxlLnR5cGUgPSBcInRleHQvY3NzXCI7XG4gICAgY3NzID0gXCIjXCIgKyB0aGlzLmlucHV0LmlkICsgXCI6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIgeyBjb2xvcjogXCIgKyB0aGlzLnBsYWNlaG9sZGVyQ29sb3IgKyBcIjsgfVwiO1xuICAgIHRoaXMucGFnZVN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICAgIHJldHVybiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHRoaXMucGFnZVN0eWxlKTtcbiAgfTtcblxuICBJbnB1dC5wcm90b3R5cGUuZm9jdXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnB1dC5mb2N1cygpO1xuICB9O1xuXG4gIHJldHVybiBJbnB1dDtcblxufSkoTGF5ZXIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMMVZ6WlhKekwycGxabVp5WlhrdWFHRnljbWx6TDBSbGRtVnNiM0J0Wlc1MEwyWnlZVzFsY2kxemEyVjBZMmd0Wm1seVpXSmhjMlV0WW05cGJHVnljR3hoZEdVdmMzSmpMMjF2WkhWc1pYTXZhVzV3ZFhSbWFXVnNaQzVqYjJabVpXVWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl2VlhObGNuTXZhbVZtWm5KbGVTNW9ZWEp5YVhNdlJHVjJaV3h2Y0cxbGJuUXZabkpoYldWeUxYTnJaWFJqYUMxbWFYSmxZbUZ6WlMxaWIybHNaWEp3YkdGMFpTOXpjbU12Ylc5a2RXeGxjeTlwYm5CMWRHWnBaV3hrTG1OdlptWmxaU0pkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4SlFVRkJPenM3UVVGQlRTeFBRVUZQTEVOQlFVTTdPenRGUVVOaUxFdEJRVU1zUTBGQlFTeE5RVUZFTEVOQlFWRXNUMEZCVWl4RlFVTkRPMGxCUVVFc1IwRkJRU3hGUVVGTExGTkJRVUU3WVVGQlJ5eEpRVUZETEVOQlFVRXNTMEZCU3l4RFFVRkRPMGxCUVZZc1EwRkJURHRKUVVOQkxFZEJRVUVzUlVGQlN5eFRRVUZETEV0QlFVUTdZVUZEU2l4RFFVRkRMRU5CUVVNc1RVRkJSaXhEUVVGVExFbEJRVU1zUTBGQlFTeExRVUZMTEVOQlFVTXNTMEZCYUVJc1JVRkJkVUlzUzBGQmRrSTdTVUZFU1N4RFFVUk1PMGRCUkVRN08wVkJTMEVzUzBGQlF5eERRVUZCTEUxQlFVUXNRMEZCVVN4UFFVRlNMRVZCUTBNN1NVRkJRU3hIUVVGQkxFVkJRVXNzVTBGQlFUdGhRVUZITEVsQlFVTXNRMEZCUVN4TFFVRkxMRU5CUVVNN1NVRkJWaXhEUVVGTU8wbEJRMEVzUjBGQlFTeEZRVUZMTEZOQlFVTXNTMEZCUkR0aFFVTktMRWxCUVVNc1EwRkJRU3hMUVVGTExFTkJRVU1zUzBGQlVDeEhRVUZsTzBsQlJGZ3NRMEZFVER0SFFVUkVPenRGUVV0aExHVkJRVU1zVDBGQlJEczdUVUZCUXl4VlFVRlZPenM3VFVGRGRrSXNUMEZCVHl4RFFVRkRMRkZCUVZNN096dE5RVU5xUWl4UFFVRlBMRU5CUVVNc1VVRkJVeXhOUVVGTkxFTkJRVU03T3p0TlFVTjRRaXhQUVVGUExFTkJRVU1zVDBGQlVUczdPMDFCUTJoQ0xFOUJRVThzUTBGQlF5eFRRVUZWT3pzN1RVRkRiRUlzVDBGQlR5eERRVUZETEd0Q1FVRnpRaXhQUVVGUExFTkJRVU1zUzBGQldDeEhRVUZ6UWl4MVFrRkJkRUlzUjBGQmJVUTdPenROUVVNNVJTeFBRVUZQTEVOQlFVTXNWMEZCV1RzN08wMUJRM0JDTEU5QlFVOHNRMEZCUXl4aFFVRmpPenM3VFVGRGRFSXNUMEZCVHl4RFFVRkRMRlZCUVZjN096dE5RVU51UWl4UFFVRlBMRU5CUVVNc1lVRkJZenM3TzAxQlEzUkNMRTlCUVU4c1EwRkJReXhWUVVGWE96czdUVUZEYmtJc1QwRkJUeXhEUVVGRExFOUJRVkU3T3p0TlFVTm9RaXhQUVVGUExFTkJRVU1zWTBGQlpUczdPMDFCUTNaQ0xFOUJRVThzUTBGQlF5eFBRVUZST3p0SlFVVm9RaXgxUTBGQlRTeFBRVUZPTzBsQlJVRXNTVUZCWjBRc1owTkJRV2hFTzAxQlFVRXNTVUZCUXl4RFFVRkJMR2RDUVVGRUxFZEJRVzlDTEU5QlFVOHNRMEZCUXl4cFFrRkJOVUk3TzBsQlEwRXNTVUZCUXl4RFFVRkJMRXRCUVVRc1IwRkJVeXhSUVVGUkxFTkJRVU1zWVVGQlZDeERRVUYxUWl4UFFVRjJRanRKUVVOVUxFbEJRVU1zUTBGQlFTeExRVUZMTEVOQlFVTXNSVUZCVUN4SFFVRlpMRkZCUVVFc1IwRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZHTEVOQlFVRXNRMEZCUkR0SlFVTndRaXhKUVVGRExFTkJRVUVzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRmlMRWRCUVhWQ0xHRkJRVUVzUjBGQll5eFBRVUZQTEVOQlFVTXNVVUZCZEVJc1IwRkJLMElzYlVKQlFTOUNMRWRCUVd0RUxFOUJRVThzUTBGQlF5eFZRVUV4UkN4SFFVRnhSU3hsUVVGeVJTeEhRVUZ2Uml4UFFVRlBMRU5CUVVNc1QwRkJOVVlzUjBGQmIwY3NZVUZCY0Vjc1IwRkJhVWdzVDBGQlR5eERRVUZETEV0QlFYcElMRWRCUVN0SUxHTkJRUzlJTEVkQlFUWkpMRTlCUVU4c1EwRkJReXhOUVVGeVNpeEhRVUUwU2l3MFJrRkJOVW9zUjBGQmQxQXNUMEZCVHl4RFFVRkRMR1ZCUVdoUkxFZEJRV2RTTEdsQ1FVRm9VaXhIUVVGcFV5eFBRVUZQTEVOQlFVTXNWVUZCZWxNc1IwRkJiMVFzWVVGQmNGUXNSMEZCYVZVc1QwRkJUeXhEUVVGRExFOUJRWHBWTEVkQlFXbFdPMGxCUTNoWExFbEJRVU1zUTBGQlFTeExRVUZMTEVOQlFVTXNTMEZCVUN4SFFVRmxMRTlCUVU4c1EwRkJRenRKUVVOMlFpeEpRVUZETEVOQlFVRXNTMEZCU3l4RFFVRkRMRWxCUVZBc1IwRkJZeXhQUVVGUExFTkJRVU03U1VGRGRFSXNTVUZCUXl4RFFVRkJMRXRCUVVzc1EwRkJReXhYUVVGUUxFZEJRWEZDTEU5QlFVOHNRMEZCUXp0SlFVTTNRaXhKUVVGRExFTkJRVUVzU1VGQlJDeEhRVUZSTEZGQlFWRXNRMEZCUXl4aFFVRlVMRU5CUVhWQ0xFMUJRWFpDTzBsQlJWSXNTVUZCUXl4RFFVRkJMRWxCUVVrc1EwRkJReXhYUVVGT0xFTkJRV3RDTEVsQlFVTXNRMEZCUVN4TFFVRnVRanRKUVVOQkxFbEJRVU1zUTBGQlFTeFJRVUZSTEVOQlFVTXNWMEZCVml4RFFVRnpRaXhKUVVGRExFTkJRVUVzU1VGQmRrSTdTVUZGUVN4SlFVRkRMRU5CUVVFc1pVRkJSQ3hIUVVGdFFqdEpRVU51UWl4SlFVRnZSQ3hKUVVGRExFTkJRVUVzWjBKQlFYSkVPMDFCUVVFc1NVRkJReXhEUVVGQkxITkNRVUZFTEVOQlFYZENMRTlCUVU4c1EwRkJReXhuUWtGQmFFTXNSVUZCUVRzN1JVRTVRbGs3TzJ0Q1FXZERZaXh6UWtGQlFTeEhRVUYzUWl4VFFVRkRMRXRCUVVRN1FVRkRka0lzVVVGQlFUdEpRVUZCTEVsQlFVTXNRMEZCUVN4blFrRkJSQ3hIUVVGdlFqdEpRVU53UWl4SlFVRkhMSE5DUVVGSU8wMUJRME1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRmtMRU5CUVRCQ0xFbEJRVU1zUTBGQlFTeFRRVUV6UWl4RlFVUkVPenRKUVVWQkxFbEJRVU1zUTBGQlFTeFRRVUZFTEVkQlFXRXNVVUZCVVN4RFFVRkRMR0ZCUVZRc1EwRkJkVUlzVDBGQmRrSTdTVUZEWWl4SlFVRkRMRU5CUVVFc1UwRkJVeXhEUVVGRExFbEJRVmdzUjBGQmEwSTdTVUZEYkVJc1IwRkJRU3hIUVVGTkxFZEJRVUVzUjBGQlNTeEpRVUZETEVOQlFVRXNTMEZCU3l4RFFVRkRMRVZCUVZnc1IwRkJZeXgxUTBGQlpDeEhRVUZ4UkN4SlFVRkRMRU5CUVVFc1owSkJRWFJFTEVkQlFYVkZPMGxCUXpkRkxFbEJRVU1zUTBGQlFTeFRRVUZUTEVOQlFVTXNWMEZCV0N4RFFVRjFRaXhSUVVGUkxFTkJRVU1zWTBGQlZDeERRVUYzUWl4SFFVRjRRaXhEUVVGMlFqdFhRVU5CTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJaQ3hEUVVFd1FpeEpRVUZETEVOQlFVRXNVMEZCTTBJN1JVRlNkVUk3TzJ0Q1FWVjRRaXhMUVVGQkxFZEJRVThzVTBGQlFUdFhRVU5PTEVsQlFVTXNRMEZCUVN4TFFVRkxMRU5CUVVNc1MwRkJVQ3hEUVVGQk8wVkJSRTA3T3pzN1IwRnlSRzlDSW4wPVxuIl19"}